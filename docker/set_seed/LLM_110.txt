-- 清理环境，防止已有同名表影响测试
DROP TABLE IF EXISTS test_table;

-- 1. 创建测试表
CREATE TABLE test_table (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50),
    age INT,
    email VARCHAR(100)
);

-- 2. 插入数据（正常数据）
INSERT INTO test_table (name, age, email) VALUES ('Alice', 25, 'alice@example.com');
INSERT INTO test_table (name, age, email) VALUES ('Bob', 30, 'bob@example.com');
INSERT INTO test_table (name, age, email) VALUES ('Charlie', 35, 'charlie@example.com');

-- 3. 执行查询，验证数据插入情况
SELECT * FROM test_table;

-- 4. 测试更新语句
UPDATE test_table SET age = age + 1 WHERE name = 'Alice';

-- 5. 再次查询，确认更新结果
SELECT * FROM test_table WHERE name = 'Alice';

-- 6. 测试删除语句，删除部分数据
DELETE FROM test_table WHERE name = 'Charlie';

-- 7. 查询，验证删除效果
SELECT * FROM test_table;

-- 8. 边界测试：执行一个SQL注入尝试（仅用于测试环境，不要在生产环境中使用）
SELECT * FROM test_table WHERE name = 'Bob' OR 1=1;

-- 9. 测试事务操作（提交和回滚）
START TRANSACTION;
INSERT INTO test_table (name, age, email) VALUES ('David', 40, 'david@example.com');
-- 此处可验证数据是否临时存在：SELECT * FROM test_table;
ROLLBACK;
-- 验证回滚后的数据
SELECT * FROM test_table WHERE name = 'David';

-- 10. 长查询测试：利用 SLEEP 模拟长时间运行查询
SELECT SLEEP(2);

-- 11. 最后清理测试表
DROP TABLE test_table;