create table test_table (
    id int auto_increment primary key,
    name varchar(255) not null,
    description text,
    created_at datetime default current_timestamp,
    status enum('active', 'inactive') not null,
    amount decimal(10, 2),
    unique key unique_name (name)
) charset utf8mb4;

create index idx_status on test_table(status);

insert into test_table(name, description, status, amount) values
('Test Item 1', 'This is a test item.', 'active', 100.50),
('Test Item 2', 'Another test item.', 'inactive', 200.75),
('Test Item 3', 'Yet another test item.', 'active', 300.00);

create function get_full_name(first varchar(50), last varchar(50))
returns varchar(101)
deterministic
begin
    declare full_name varchar(101);
    set full_name = concat(first, ' ', last);
    return full_name;
end;

delimiter $$

create trigger after_insert_test_table
after insert on test_table
for each row
begin
    insert into log_table (action, details)
    values ('insert', concat_ws(': ', 'id', new.id, 'name', new.name));
end$$

delimiter ;

create view v_test_summary as
select 
    status,
    count(*) as total_items,
    sum(amount) as total_amount
from test_table
group by status;

select t1.id, t1.name, t2.description
from test_table t1
join (
    select id, description from test_table where status = 'active'
) t2 on t1.id = t2.id
where exists (
    select 1 from test_table where name like '%test%'
);

select count(*) as total_records from test_table;

set autocommit=0;
start transaction;
update test_table set amount = amount + 50.00 where status = 'active';
savepoint sp_after_update;
commit;

select * from test_table order by id desc limit 1,5;

create temporary table temp_test (
    id int,
    value varchar(255)
);

insert into temp_test values (1, 'temp1'), (2, 'temp2');

select t.id, t.name, tt.value
from test_table t
left join temp_test tt on t.id = tt.id;

drop temporary table temp_test;

select group_concat(name separator ', ') as all_names from test_table;

set @test_var := 10;
prepare stmt from 'select * from test_table where id > ?';
execute stmt using @test_var;

call get_full_name('John', 'Doe');

show status like 'Threads_connected';

select @@global.max_connections;

lock table test_table read;
select * from test_table;
unlock tables;

create event if not exists cleanup_event
on schedule every 1 hour
do truncate table log_table;

drop function get_full_name;
drop trigger after_insert_test_table;
drop view v_test_summary;
drop table test_table;