SET NAMES utf8mb4;
CREATE TABLE t1 (
    id INT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    age TINYINT UNSIGNED,
    balance DECIMAL(10, 2),
    last_login DATETIME,
    is_active BOOLEAN DEFAULT TRUE,
    profile JSON
);

CREATE TABLE t2 (
    transaction_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    amount DECIMAL(10, 2) NOT NULL,
    transaction_date DATE NOT NULL,
    status ENUM('PENDING', 'COMPLETED', 'FAILED'),
    UNIQUE INDEX idx_user_transaction (user_id, transaction_date)
);

INSERT INTO t1 VALUES
(1, 'Alice', 30, 5000.75, '2024-01-01 12:00:00', TRUE, '{"email": "alice@example.com", "phone": "123-456-7890"}'),
(2, 'Bob', NULL, -500.50, '2024-01-02 13:00:00', FALSE, '{"email": null}'),
(3, 'Charlie', 45, 10000.00, '2024-01-03 14:00:00', TRUE, '{"phone": "987-654-3210"}');

INSERT INTO t2 VALUES
(1, 1, 100.00, '2024-01-01', 'COMPLETED'),
(2, 1, -50.00, '2024-01-02', 'FAILED'),
(3, 2, 75.50, '2024-01-03', 'PENDING');

ALTER TABLE t1 ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;

CREATE INDEX idx_name_age ON t1 (name, age);
CREATE FULLTEXT INDEX idx_ft_name ON t1 (name);

DELIMITER $$
CREATE PROCEDURE insert_user(
    IN p_name VARCHAR(255),
    IN p_age TINYINT UNSIGNED,
    IN p_balance DECIMAL(10, 2)
)
BEGIN
    DECLARE v_id INT;
    
    SELECT MAX(id) + 1 INTO v_id FROM t1;
    
    INSERT INTO t1 (id, name, age, balance, last_login, profile)
    VALUES (v_id, p_name, p_age, p_balance, NOW(), '{"created_at": "' || NOW() || '"}');
END$$
DELIMITER ;

CREATE TRIGGER after_insert_t2 AFTER INSERT ON t2 FOR EACH ROW
BEGIN
    IF NEW.status = 'COMPLETED' THEN
        UPDATE t1 SET balance = balance + NEW.amount WHERE id = NEW.user_id;
    ELSEIF NEW.status = 'FAILED' THEN
        INSERT INTO t1 (id, name, age) VALUES (DEFAULT, 'Default', 0);
    END IF;
END;

CREATE VIEW v_user_balance AS
SELECT 
    u.id,
    u.name,
    u.age,
    COALESCE(u.balance, 0.00) as balance,
    COUNT(t.transaction_id) as total_transactions,
    SUM(t.amount) as total_amount
FROM t1 u
LEFT JOIN t2 t ON u.id = t.user_id
GROUP BY u.id;

CREATE FUNCTION calculate_average_balance()
RETURNS DECIMAL(10, 2)
DETERMINISTIC
BEGIN
    DECLARE avg_bal DECIMAL(10, 2);
    
    SELECT AVG(balance) INTO avg_bal FROM t1 WHERE is_active = TRUE;
    
    RETURN avg_bal;
END$$

DELIMITER ;

START TRANSACTION;
SAVEPOINT sp1;

INSERT INTO t1 (id, name, age, balance) VALUES (4, 'David', 25, 2000.00);
SELECT calculate_average_balance();
SAVEPOINT sp2;

ROLLBACK TO sp1;
COMMIT;

GRANT SELECT ON t1 TO 'readonly_user'@'localhost';
REVOKE INSERT ON t1 FROM ' readonly_user '@'localhost';

PREPARE stmt FROM 'SELECT * FROM t1 WHERE id = ?';
EXECUTE stmt USING @id := 1;
DEALLOCATE PREPARE stmt;

WITH recursive_cte AS (
    SELECT 1 as n
    UNION ALL
    SELECT n + 1 from recursive_cte where n < 5
)
SELECT * FROM recursive_cte;

SELECT 
    id,
    name,
    age,
    balance,
    created_at,
    JSON_EXTRACT(profile, '$.email') as email
FROM t1
WHERE is_active = TRUE
ORDER BY created_at DESC
LIMIT 2 OFFSET 1;