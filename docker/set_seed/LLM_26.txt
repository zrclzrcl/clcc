-- Create a table with various data types and constraints
CREATE TABLE t1 (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    value REAL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Create an index on the 'name' column for faster lookups
CREATE INDEX idx_t1_name ON t1(name);

-- Insert some sample data into the table
INSERT INTO t1 (id, name, value) VALUES 
(1, 'Alice', 100.5),
(2, 'Bob', 200.3),
(3, 'Charlie', 300.7);

-- Create a virtual table using the FTS5 extension for full-text search
CREATE VIRTUAL TABLE t1_fts USING fts5(name, value);

-- Insert data into the virtual table
INSERT INTO t1_fts (name, value) VALUES 
('Alice', '100.5'),
('Bob', '200.3'),
('Charlie', '300.7');

-- Create a trigger that fires on insert operations
CREATE TRIGGER t1_after_insert AFTER INSERT ON t1 BEGIN
    INSERT INTO t1_fts (name, value) VALUES (NEW.name, NEW.value);
END;

-- Create another table for testing joins
CREATE TABLE t2 (
    id INTEGER PRIMARY KEY,
    t1_id INTEGER REFERENCES t1(id),
    description TEXT
);

-- Insert sample data into the second table
INSERT INTO t2 (id, t1_id, description) VALUES 
(1, 1, 'Description for Alice'),
(2, 2, 'Description for Bob'),
(3, 3, 'Description for Charlie');

-- Create a trigger that fires on update operations
CREATE TRIGGER t1_after_update AFTER UPDATE ON t1 BEGIN
    UPDATE t1_fts SET name = NEW.name, value = NEW.value WHERE rowid = OLD.rowid;
END;

-- Create a trigger that fires on delete operations
CREATE TRIGGER t1_after_delete AFTER DELETE ON t1 BEGIN
    DELETE FROM t1_fts WHERE rowid = OLD.rowid;
END;

-- Select statements with various clauses for testing query execution
SELECT 
    t1.id,
    t1.name,
    t2.description,
    ROW_NUMBER() OVER (ORDER BY t1.value DESC) AS rank_desc,
    RANK() OVER (ORDER BY t1.value ASC) AS rank_asc
FROM 
    t1
JOIN 
    t2 ON t1.id = t2.t1_id
WHERE 
    t1.value > 150.0
GROUP BY 
    t1.id, t1.name, t2.description
HAVING 
    COUNT(*) > 0
ORDER BY 
    rank_desc ASC;

-- Union of two different select statements to test result set merging
SELECT name AS user_name FROM t1 UNION ALL SELECT description AS user_description FROM t2;