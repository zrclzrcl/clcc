-- Create tables with various data types and constraints
CREATE TABLE test_types (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    value BLOB,
    active BOOLEAN DEFAULT 1,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE related_data (
    id INTEGER PRIMARY KEY,
    type_id INTEGER REFERENCES test_types(id) ON DELETE CASCADE,
    data_value REAL CHECK(data_value > 0)
);

-- Create indexes to support queries and constraints
CREATE INDEX idx_test_types_name ON test_types(name);
CREATE UNIQUE INDEX idx_related_data_type_id ON related_data(type_id);
CREATE INDEX idx_test_types_created_at ON test_types(created_at DESC);

-- Insert sample data with edge cases
INSERT INTO test_types (name, value, active)
VALUES ('Test1', X'00FF', 1),
       ('Test2', NULL, 0),
       ('Test3', X'FFFF', 1);

INSERT INTO related_data (id, type_id, data_value)
VALUES (1, 1, 100.5),
       (2, 2, -200.75); -- Testing negative values

-- Create a view to test query execution on derived tables
CREATE VIEW v_test_stats AS
SELECT t.name, COUNT(r.id) as related_count
FROM test_types t
LEFT JOIN related_data r ON t.id = r.type_id
GROUP BY t.id;

-- Create a trigger for testing database events and data logging
CREATE TABLE log_table (
    log_id INTEGER PRIMARY KEY AUTOINCREMENT,
    event_time DATETIME DEFAULT CURRENT_TIMESTAMP,
    event_type TEXT,
    details TEXT
);

CREATE TRIGGER after_insert_log
AFTER INSERT ON related_data
FOR EACH ROW
BEGIN
    INSERT INTO log_table (event_type, details)
    VALUES ('INSERT', 'New data inserted: ' || NEW.data_value);
END;

-- Test transactions and concurrency handling
BEGIN TRANSACTION;
    UPDATE test_types SET active = 0 WHERE name = 'Test2';
    DELETE FROM related_data WHERE id = 2;
COMMIT;

BEGIN TRANSACTION;
    INSERT INTO test_types (name, value) VALUES ('Test4', X'1234');
    ROLLBACK; -- Testing rollback
END;

-- Test complex queries with CTE and window functions
WITH sample_cte AS (
    SELECT name, created_at,
           ROW_NUMBER() OVER (ORDER BY created_at DESC) as rn
    FROM test_types
)
SELECT * FROM sample_cte WHERE rn <= 2;

-- Test edge cases with NULL and boundary values
INSERT INTO test_types (name, value, active)
VALUES ('Test_NULL', NULL, NULL); -- Testing NULLs

SELECT MIN(created_at), MAX(created_at) FROM test_types;
SELECT COUNT(*) FROM related_data WHERE data_value > 0;

-- Clean up unnecessary tables to prepare for mutations
DROP TABLE IF EXISTS temp_table;
CREATE TEMPORARY TABLE temp_table AS SELECT * FROM test_types LIMIT 1;

ALTER TABLE test_types ADD COLUMN new_column TEXT DEFAULT 'default_value';
ALTER TABLE test_types RENAME COLUMN active TO is_active;

VACUUM; -- Testing database maintenance operations

-- Test advanced join operations and subqueries
SELECT t.name, r.data_value
FROM test_types t
JOIN related_data r ON t.id = r.type_id
WHERE t.is_active AND r.data_value > (SELECT AVG(data_value) FROM related_data);

-- Ensure all statements are syntactically correct and semantically valid for SQLite