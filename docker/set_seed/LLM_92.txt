-- Create tables with various data types and constraints
CREATE TABLE IF NOT EXISTS data_table (
    id INTEGER PRIMARY KEY,
    name TEXT UNIQUE,
    value REAL CHECK(value >= 0),
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    status BOOLEAN DEFAULT TRUE,
    blob_data BLOB
);

-- Create a table for testing joins and relationships
CREATE TABLE IF NOT EXISTS metadata (
    id INTEGER PRIMARY KEY,
    data_id INTEGER REFERENCES data_table(id),
    key TEXT,
    value TEXT,
    UNIQUE(key, value)
);

-- Insert sample data into the tables
INSERT INTO data_table (id, name, value, timestamp, status, blob_data) VALUES
(1, 'Item1', 100.5, '2023-01-01 12:00:00', TRUE, x'0102'),
(2, 'Item2', 200.75, '2023-01-02 13:30:00', FALSE, x'0304'),
(3, 'Item3', NULL, '2023-01-03 14:45:00', TRUE, NULL);

-- Insert related metadata
INSERT INTO metadata (id, data_id, key, value) VALUES
(1, 1, 'category', 'electronics'),
(2, 1, 'brand', 'TechCo'),
(3, 2, 'category', 'clothing'),
(4, 2, 'size', 'XL');

-- Create indexes for efficient querying
CREATE INDEX idx_data_value ON data_table(value);
CREATE INDEX idx_metadata_key ON metadata(key);

-- Complex SELECT statements to test various functionalities

-- Test JOINs and aggregate functions
SELECT d.name, m.key, COUNT(m.id) AS meta_count
FROM data_table d
LEFT JOIN metadata m ON d.id = m.data_id
GROUP BY d.name, m.key
ORDER BY d.name DESC;

-- Test subqueries and window functions
SELECT name, value,
       RANK() OVER (ORDER BY value DESC) as rank_value,
       (SELECT COUNT(*) FROM metadata WHERE data_id = id) AS meta_count
FROM data_table
WHERE status = TRUE
ORDER BY rank_value;

-- Test UNION ALL and DISTINCT
(SELECT id, name FROM data_table)
UNION ALL
(SELECT data_id, (SELECT name FROM data_table WHERE id = m.data_id) FROM metadata m);

-- Test CASE expressions and string operations
SELECT id, name,
       CASE
           WHEN value > 150 THEN 'High'
           WHEN value BETWEEN 50 AND 150 THEN 'Medium'
           ELSE 'Low'
       END AS value_category,
       substr(name, 2) AS substring_name
FROM data_table;

-- Test transactions and temporary tables (for testing edge cases)
BEGIN TRANSACTION;
CREATE TEMPORARY TABLE temp_data AS SELECT * FROM data_table WHERE status = TRUE;
SELECT * FROM temp_data;
COMMIT;

-- Test common table expressions (CTEs)
WITH ranked_data AS (
    SELECT id, name, value,
           RANK() OVER (ORDER BY value DESC) as rank
    FROM data_table
)
SELECT rd.id, rd.name, rd.value, rd.rank,
       (SELECT COUNT(*) FROM metadata WHERE data_id = rd.id) AS meta_count
FROM ranked_data rd
WHERE rd.rank <= 2;