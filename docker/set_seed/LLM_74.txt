-- Initial seed for MySQL fuzz testing
CREATE TABLE employees (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    salary DECIMAL(10,2) CHECK (salary >= 0),
    hire_date DATE DEFAULT '1970-01-01',
    is_active BOOLEAN DEFAULT TRUE
);

INSERT INTO employees VALUES 
(NULL, 'John', 'Doe', 50000.00, '2023-01-01', TRUE),
(NULL, 'Jane', 'Smith', NULL, '2023-02-02', FALSE),
(NULL, '', '', 0, '2023-03-03', TRUE);

CREATE TABLE departments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL
);

ALTER TABLE employees ADD COLUMN department_id INT;
ALTER TABLE employees ADD CONSTRAINT fk_department FOREIGN KEY (department_id) REFERENCES departments(id);

CREATE INDEX idx_last_name ON employees(last_name);
CREATE UNIQUE INDEX idx_unique_name ON departments(name);

INSERT INTO departments VALUES 
(NULL, 'Human Resources'),
(NULL, 'Engineering'),
(NULL, 'Marketing');

UPDATE employees SET department_id = 1 WHERE id = 1;
UPDATE employees SET salary = NULL WHERE is_active = FALSE;

SELECT e.first_name, e.last_name, d.name AS department
FROM employees e
JOIN departments d ON e.department_id = d.id
WHERE e.salary IS NOT NULL AND e.hire_date >= '2023-01-01';

START TRANSACTION;
INSERT INTO departments VALUES (NULL, 'Sales');
SAVEPOINT before_sales;
INSERT INTO departments VALUES (NULL, 'Finance');
ROLLBACK TO SAVEPOINT before_sales;
COMMIT;

CREATE TABLE sales (
    id INT AUTO_INCREMENT PRIMARY KEY,
    amount DECIMAL(10,2),
    sale_date DATE,
    region VARCHAR(50)
) PARTITION BY RANGE (YEAR(sale_date)) (
    PARTITION p2023 VALUES LESS THAN (2024),
    PARTITION p2024 VALUES LESS THAN (2025),
    PARTITION p_max VALUES LESS THAN MAXVALUE
);

INSERT INTO sales VALUES 
(NULL, 100.00, '2023-06-01', 'North'),
(NULL, 200.00, '2024-01-01', 'South');

CREATE TRIGGER log_sales AFTER INSERT ON sales
FOR EACH ROW
INSERT INTO sales_log VALUES (NULL, NEW.amount, NEW.sale_date);

ANALYZE TABLE employees;
CHECKSUM TABLE departments;

-- Stored Procedure Example
DELIMITER $$
CREATE PROCEDURE get_active_employees()
BEGIN
    SELECT * FROM employees WHERE is_active = TRUE;
END$$
DELIMITER ;

-- Function Example
DELIMITER $$
CREATE FUNCTION calculate_total_sales(region VARCHAR(50))
RETURNS DECIMAL(10,2)
DETERMINISTIC
READS SQL DATA
BEGIN
    DECLARE total DECIMAL(10,2);
    SELECT SUM(amount) INTO total FROM sales WHERE region = calculate_total_sales.region;
    RETURN total;
END$$
DELIMITER ;

-- View Example
CREATE VIEW employee_details AS
SELECT id, CONCAT(first_name, ' ', last_name) AS full_name, salary, hire_date
FROM employees;

-- Index on a function
CREATE INDEX idx_hire_month ON employees(MONTH(hire_date));

-- Testing NULL and boolean values
INSERT INTO departments VALUES (NULL, '');
UPDATE departments SET name = NULL WHERE id = 4;
SET SQL_SAFE_UPDATES = 0;
DELETE FROM departments WHERE name IS NULL;
SET SQL_SAFE_UPDATES = 1;

-- Testing date arithmetic
SELECT DATEDIFF('2023-12-31', '2023-01-01') AS days_in_year;