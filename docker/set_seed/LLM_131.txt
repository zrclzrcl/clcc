-- Create tables with various data types and constraints
CREATE TABLE t1(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    value REAL CHECK(value >= 0),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Table for testing unique constraints and indexes
CREATE TABLE t2(
    key TEXT UNIQUE ON CONFLICT REPLACE,
    count INTEGER DEFAULT 0
);

-- Table with foreign key relationships
CREATE TABLE t3(
    id INTEGER PRIMARY KEY,
    category_id INTEGER REFERENCES t1(id),
    data BLOB
);

-- Table with triggers for testing cascading operations
CREATE TABLE t4(
    log_id INTEGER PRIMARY KEY AUTOINCREMENT,
    message TEXT NOT NULL,
    severity_level INTEGER CHECK(severity_level BETWEEN 1 AND 5)
);

-- Create an index on a frequently queried column
CREATE INDEX idx_t2_key ON t2(key);

-- Insert sample data with edge cases
INSERT INTO t1(name, value) VALUES
('Test1', 10.5),
('Test2', NULL),          -- Testing NULL values
('Test3', 9999999999999999); -- Testing large integer

-- Insert into t2 with ON CONFLICT
INSERT INTO t2(key, count) VALUES
('A', 1),
('B', 2)
ON CONFLICT(key) DO UPDATE SET count = excluded.count + 1;

-- Insert into t3 with BLOB data
INSERT INTO t3(id, category_id, data) VALUES
(1, 1, zeroblob(10)),
(2, NULL, randomblob(20));

-- Testing transactions and rollbacks
BEGIN;
    INSERT INTO t4(message, severity_level) VALUES('Test transaction', 3);
    -- Simulate a condition that may fail
    INSERT INTO t4(message, severity_level) VALUES('Rollback test', 5)
        ON CONFLICT(severity_level) DO NOTHING;
COMMIT;

-- Complex query with subqueries and window functions
SELECT 
    t1.name,
    (SELECT COUNT(*) FROM t2 WHERE key LIKE 'A%') AS count_a,
    ROW_NUMBER() OVER(ORDER BY value DESC) AS rank
FROM t1
WHERE created_at >= datetime('now', '-1 month')
GROUP BY name;

-- Testing CTE and recursive queries
WITH 
    category_sum AS (
        SELECT category_id, SUM(value) total_value
        FROM t1 JOIN t3 ON t1.id = t3.category_id
        GROUP BY category_id
    ),
    final_result AS (
        SELECT * FROM category_sum
        UNION ALL
        SELECT NULL, SUM(total_value) FROM category_sum
    )
SELECT * FROM final_result;

-- Testing triggers and cascading operations
CREATE TRIGGER after_insert_t4
AFTER INSERT ON t4
BEGIN
    UPDATE t2 SET count = count + 1 WHERE key = 'A';
END;

-- Cleanup (uncomment if needed)
-- DROP TABLE IF EXISTS t1, t2, t3, t4;