SET NAMES utf8mb4;
CREATE TABLE test_table (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    amount DECIMAL(10, 2),
    status ENUM('active', 'inactive'),
    description TEXT,
    data BLOB
);

INSERT INTO test_table (name, amount, status, description)
VALUES 
    ('Test Record 1', 100.50, 'active', 'This is a test record.'),
    ('Test Record 2', NULL, 'inactive', ''),
    ('Test Record 3', 9999999999.99, 'active', 'Maximum value test'),
    ('Test Record 4', 0.00, 'inactive', 'Zero value test'),
    (NULL, 123.45, 'active', 'NULL name test');

SELECT * FROM test_table WHERE amount > 100;
SELECT id, UPPER(name) AS uppercase_name FROM test_table ORDER BY created_at DESC LIMIT 5;
SELECT COUNT(*) AS total_records, SUM(amount) AS total_amount FROM test_table;
SELECT MAX(amount), MIN(amount), AVG(amount) FROM test_table;

CREATE TABLE test_join (
    id INT AUTO_INCREMENT PRIMARY KEY,
    test_id INT,
    value VARCHAR(255),
    FOREIGN KEY (test_id) REFERENCES test_table(id)
);

INSERT INTO test_join (test_id, value)
VALUES 
    (1, 'Join Record 1'),
    (2, 'Join Record 2'),
    (3, 'Join Record 3');

SELECT t.name, j.value FROM test_table t JOIN test_join j ON t.id = j.test_id;
SELECT t.name, COUNT(j.id) AS join_count FROM test_table t LEFT JOIN test_join j ON t.id = j.test_id GROUP BY t.id;

WITH recursive_cte AS (
    SELECT 1 AS n
    UNION ALL
    SELECT n + 1 FROM recursive_cte WHERE n < 5
)
SELECT * FROM recursive_cte;

SELECT RANK() OVER (ORDER BY amount DESC) AS rank, name, amount FROM test_table;
SET @var = 'test_variable';
SELECT IFNULL(amount, 0) AS safe_amount FROM test_table WHERE id = @var;

ANALYZE TABLE test_table;
SHOW INDEXES FROM test_table;