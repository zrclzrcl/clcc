-- Create a table with various constraints to test schema validation
CREATE TABLE IF NOT EXISTS t1 (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,
    age INTEGER CHECK(age >= 0),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    status TEXT CHECK(status IN ('active', 'inactive'))
);

-- Insert sample data with edge cases (e.g., minimum and maximum values)
INSERT INTO t1(name, age) VALUES('Alice', 0);
INSERT INTO t1(name, age) VALUES('Bob', 999);
INSERT INTO t1(name, age) VALUES('Charlie', 42);

-- Test update operations
UPDATE t1 SET status = 'inactive' WHERE name = 'Alice';
UPDATE t1 SET age = 100 WHERE name = 'Bob';

-- Test delete operations
DELETE FROM t1 WHERE name = 'Charlie';

-- Create a table with foreign key constraints and test referential integrity
CREATE TABLE IF NOT EXISTS t2 (
    id INTEGER PRIMARY KEY,
    t1_id INTEGER REFERENCES t1(id) ON DELETE CASCADE,
    value TEXT
);

-- Insert data into the child table
INSERT INTO t2(t1_id, value) VALUES(1, 'test_value');

-- Test ALTER TABLE operations (e.g., adding a column)
ALTER TABLE t1 ADD COLUMN notes TEXT;

-- Create a table with unique constraints and test uniqueness
CREATE TABLE IF NOT EXISTS t3 (
    id INTEGER PRIMARY KEY,
    code TEXT UNIQUE
);

INSERT INTO t3(code) VALUES('ABC');
INSERT INTO t3(code) VALUES('DEF');

-- Test indexes on expressions (e.g., lower-case names)
CREATE INDEX idx_lower_name ON t1(lower(name));

-- Create a view to test SQL queries with CTEs and complex joins
WITH cte AS (
    SELECT name, age FROM t1 WHERE status = 'active'
)
SELECT c.name, t2.value 
FROM cte c
JOIN t2 ON c.id = t2.t1_id;

-- Test triggers for testing database state changes
CREATE TRIGGER IF NOT EXISTS trg_after_insert_t1
AFTER INSERT ON t1
BEGIN
    INSERT INTO t3(code) VALUES(NEW.name || NEW.id);
END;

-- Clean up the tables (uncomment if needed)
-- DROP TABLE IF EXISTS t3;
-- DROP TABLE IF EXISTS t2;
-- DROP TABLE IF EXISTS t1;