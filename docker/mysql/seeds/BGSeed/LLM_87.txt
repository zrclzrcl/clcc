SET optimizer_switch='semijoin=on,materialization=on,firstmatch=on,loosescan=on,index_condition_pushdown=on,mrr=on,mrr_cost_based=off';
CREATE TABLE t1 (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    status ENUM('active', 'inactive') DEFAULT 'active',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    amount DECIMAL(10, 2) NOT NULL,
    description TEXT
);
INSERT INTO t1 (name, status, amount, description)
VALUES 
    ('Item 1', 'active', 100.50, 'First item'),
    ('Item 2', 'inactive', 200.75, 'Second item'),
    ('Item 3', 'active', NULL, 'Third item with no amount');
CREATE TABLE t2 (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    table_name VARCHAR(255) NOT NULL,
    action ENUM('insert', 'update', 'delete') NOT NULL,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
);
DELIMITER ;;
CREATE PROCEDURE update_item_status(IN item_id INT, IN new_status ENUM('active', 'inactive'))
BEGIN
    DECLARE current_amount DECIMAL(10, 2);
    
    SELECT amount INTO current_amount FROM t1 WHERE id = item_id;
    
    IF current_amount IS NOT NULL THEN
        UPDATE t1 SET status = new_status WHERE id = item_id;
    ELSE
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Item has no amount assigned';
    END IF;
END;;
DELIMITER ;
CREATE TRIGGER after_t1_insert AFTER INSERT ON t1
FOR EACH ROW
BEGIN
    INSERT INTO t2 (table_name, action) VALUES ('t1', 'insert');
END;
CREATE TRIGGER before_t1_update BEFORE UPDATE ON t1
FOR EACH ROW
BEGIN
    INSERT INTO t2 (table_name, action) VALUES ('t1', 'update');
END;
SELECT 
    t1.id,
    t1.name,
    t1.status,
    t1.amount,
    t2.log_id,
    t2.action
FROM 
    t1
JOIN 
    t2 ON t1.id = t2.log_id
WHERE 
    t1.status = 'active'
LIMIT 5 OFFSET 2;
SELECT 
    COUNT(*) AS total_active_items,
    SUM(amount) AS total_amount
FROM 
    t1
WHERE 
    status = 'active' AND amount > (SELECT AVG(amount) FROM t1);