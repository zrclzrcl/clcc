SET optimizer_switch='index_merge=on,batched_key_access=off';
CREATE TABLE test_table (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    age TINYINT UNSIGNED,
    balance DECIMAL(10,2),
    last_login DATETIME DEFAULT CURRENT_TIMESTAMP,
    status ENUM('active', 'inactive') NOT NULL,
    settings TEXT
);
CREATE TABLE test_table_2 (
    id INT PRIMARY KEY,
    value BLOB,
    metadata JSON
);
INSERT INTO test_table (name, age, balance, status) VALUES 
('Alice', 30, 1000.50, 'active'),
('Bob', 45, NULL, 'inactive'),
('Charlie', 25, 750.00, 'active');
INSERT INTO test_table_2 (id, value, metadata) VALUES
(1, RAND(), '{"key": "value"}'),
(2, UUID(), '{"status": "active"}');
CREATE INDEX idx_name_age ON test_table(name, age);
CREATE UNIQUE INDEX idx_balance ON test_table(balance);
ALTER TABLE test_table ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
UPDATE test_table SET balance = balance * 1.05 WHERE status = 'active';
SELECT COUNT(*) AS total_active FROM test_table WHERE status = 'active';
ANALYZE TABLE test_table;
CHECK TABLE test_table;
REPAIR TABLE test_table;
START TRANSACTION;
INSERT INTO test_table (name, age, status) VALUES ('Test User', 28, 'active');
COMMIT;
CREATE TRIGGER trg_after_update AFTER UPDATE ON test_table 
FOR EACH ROW 
UPDATE test_table SET last_login = CURRENT_TIMESTAMP WHERE id = NEW.id;
DELIMITER ;;
CREATE FUNCTION get_balance(p_id INT) RETURNS DECIMAL(10,2)
DETERMINISTIC
BEGIN
    DECLARE result DECIMAL(10,2);
    SELECT balance INTO result FROM test_table WHERE id = p_id;
    RETURN result;
END;;
DELIMITER ;
SELECT get_balance(1);