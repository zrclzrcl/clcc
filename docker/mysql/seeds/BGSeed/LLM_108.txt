SET SESSION sql_mode = 'STRICT_TRANS_TABLES';

CREATE TABLE test_table (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    value DECIMAL(10, 2),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    status ENUM('active', 'inactive') DEFAULT 'active',
    data BLOB,
    json_data JSON,
    UNIQUE INDEX unique_name (name)
);

DELIMITER $$

CREATE PROCEDURE update_status(IN user_id INT, IN new_status ENUM('active', 'inactive'))
BEGIN
    DECLARE current_status ENUM('active', 'inactive');
    
    SELECT status INTO current_status FROM test_table WHERE id = user_id;
    
    IF current_status != new_status THEN
        UPDATE test_table SET status = new_status WHERE id = user_id;
    END IF;
END$$

DELIMITER ;

CREATE INDEX idx_value ON test_table(value);

INSERT INTO test_table (name, value, data) VALUES 
('Test1', 100.5, x'48656C6C6F'),
('Test2', NULL, NULL),
('Test3', -99999.99, 'Hello');

SELECT t1.name, t2.value FROM test_table AS t1
JOIN (
    SELECT id, value FROM test_table WHERE value > 50
) AS t2 ON t1.id = t2.id
WHERE t1.status = 'active';

SELECT COUNT(*) AS total_active FROM test_table WHERE status = 'active';

SET @json_data = '{"key": "value"}';
PREPARE stmt FROM 'INSERT INTO test_table (name, json_data) VALUES (?, ?)';
EXECUTE stmt USING 'Test4', @json_data;

START TRANSACTION;
UPDATE test_table SET value = 200.75 WHERE name = 'Test1';
SAVEPOINT my_savepoint;
DELETE FROM test_table WHERE name = 'Test2';
ROLLBACK TO my_savepoint;
COMMIT;

SELECT * FROM information_schema.tables WHERE table_name = 'test_table';

ANALYZE TABLE test_table;