SET optimizer_switch='index_merge=on,block_size=4096';
CREATE TABLE t0 (id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(50) NOT NULL, score DECIMAL(10,2), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
CREATE TABLE t1 (id INT PRIMARY KEY AUTO_INCREMENT, user_id INT, t0_id INT, FOREIGN KEY (t0_id) REFERENCES t0(id));
INSERT INTO t0 VALUES (NULL, 'Alice', 98.76, NULL), (NULL, 'Bob', 85.43, '2023-10-01 12:34:56');
ALTER TABLE t0 ADD COLUMN active BOOLEAN DEFAULT TRUE;
SELECT t0.name AS student_name, t0.score, COUNT(t1.id) AS total_activities FROM t0 LEFT JOIN t1 ON t0.id = t1.t0_id GROUP BY t0.id HAVING COUNT(t1.id) > 2 ORDER BY total_activities DESC LIMIT 5;
CREATE TABLE t2 (id INT PRIMARY KEY AUTO_INCREMENT, log_entry TEXT, timestamp DATETIME);
DELIMITER $$
CREATE FUNCTION add_numbers(a INT, b INT) RETURNS INT DETERMINISTIC NO SQL
BEGIN
    RETURN a + b;
END$$
DELIMITER ;
CREATE TRIGGER after_delete_t1 AFTER DELETE ON t1 FOR EACH ROW INSERT INTO t2 (log_entry, timestamp) VALUES ('User activity deleted', NOW());
SELECT t0.name, t0.score, t1.user_id FROM t0 INNER JOIN t1 ON t0.id = t1.t0_id WHERE t1.user_id IN (SELECT id FROM t0 WHERE score > 90);
ANALYZE TABLE t0, t1, t2;