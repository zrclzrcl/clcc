-- Step 1: Set system variables to influence memory usage
SET max_heap_table_size = 65536;

-- Step 2: Analyze table t1 to update optimizer statistics
ANALYZE TABLE t1;

-- Step 3: Show current optimizer settings
SHOW VARIABLES LIKE 'optimizer_switch';

-- Step 4: Alter table t1 by adding a JSON column for testing
ALTER TABLE t1 ADD COLUMN data JSON;

-- Step 5: Update existing records with generated JSON content
UPDATE t1 SET data = JSON_OBJECT('key', col1) WHERE id > 0;

-- Step 6: Insert diverse data including NULL, RAND(), and UUID()
INSERT INTO t1 (id, value, data)
SELECT NULL, RAND(), JSON_ARRAY(1, 2, 3);

-- Step 7: Execute a complex SELECT query with joins, subqueries, aggregates, and window functions
SELECT 
    t1.id,
    (SELECT value FROM t2 WHERE t2.id = t1.id LIMIT 1) AS related_value,
    COUNT(*) OVER () AS total_rows,
    ROW_NUMBER() OVER (ORDER BY t1.value DESC) AS row_num
FROM t1
WHERE JSON_EXTRACT(t1.data, '$.key') IS NOT NULL;

-- Step 8: Explain the query plan for optimization insights
EXPLAIN
SELECT 
    t1.id,
    (SELECT value FROM t2 WHERE t2.id = t1.id LIMIT 1) AS related_value,
    COUNT(*) OVER () AS total_rows,
    ROW_NUMBER() OVER (ORDER BY t1.value DESC) AS row_num
FROM t1
WHERE JSON_EXTRACT(t1.data, '$.key') IS NOT NULL;