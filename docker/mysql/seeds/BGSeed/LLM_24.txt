CREATE TABLE test_table (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    status ENUM('active', 'inactive') DEFAULT 'active',
    price DECIMAL(10, 2) CHECK (price >= 0),
    data BLOB,
    UNIQUE KEY unique_name (name)
);

CREATE TABLE related_table (
    id INT AUTO_INCREMENT PRIMARY KEY,
    test_id INT,
    value FLOAT,
    FOREIGN KEY (test_id) REFERENCES test_table(id)
);

INSERT INTO test_table (name, description, created_at, status, price, data) VALUES
('', 'Test description 1', '2023-01-01 00:00:00', 'active', 99.99, NULL),
('Test Name 2', '', '2023-01-02 12:34:56', 'inactive', 0.00, ''),
('Test Name 3', 'Another description', '2023-01-03 23:59:59', 'active', 123456789.99, RAND() * 100),
('', '', '2023-01-04 00:00:00', 'inactive', NULL, '');

INSERT INTO related_table (test_id, value) VALUES
(1, NULL),
(2, -510889000.5),
(3, 123456789.123456),
(1, RAND() * 100);

CREATE TRIGGER after_insert_trigger
AFTER INSERT ON test_table
FOR EACH ROW
BEGIN
    INSERT INTO related_table (test_id, value) VALUES (NEW.id, NULL);
END;

DELIMITER //
CREATE PROCEDURE test_procedure(IN param INT)
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE var FLOAT;
    
    DECLARE cursor1 CURSOR FOR SELECT value FROM related_table WHERE test_id = param;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
    
    OPEN cursor1;
    read_loop: LOOP
        FETCH cursor1 INTO var;
        IF done THEN
            LEAVE read_loop;
        END IF;
        
        INSERT INTO test_table (name, description) VALUES ('Procedure Test', CONCAT('Value: ', var));
    END LOOP;
    CLOSE cursor1;
END//
DELIMITER ;

CREATE VIEW combined_view AS
SELECT 
    t.id,
    t.name,
    r.value,
    CASE WHEN t.status = 'active' THEN 'Active Record' ELSE 'Inactive Record' END AS status_desc
FROM test_table t
LEFT JOIN related_table r ON t.id = r.test_id
WHERE t.price > 100 OR r.value IS NULL;

SELECT 
    COUNT(*) as total_records,
    SUM(price) as total_price,
    AVG(value) as average_value,
    MAX(created_at) as last_created
FROM test_table
WHERE name LIKE 'Test%' AND status = 'active'
GROUP BY id
HAVING total_price > 1000
ORDER BY last_created DESC;

ALTER TABLE test_table ADD COLUMN new_column BOOLEAN DEFAULT FALSE;