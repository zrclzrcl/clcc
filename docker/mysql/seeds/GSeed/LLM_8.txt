-- Create a temporary table with various data types to test different scenarios
CREATE TEMPORARY TABLE temp_table (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2),
    status ENUM('active', 'inactive'),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    data BLOB
);

-- Insert sample data to test with different value ranges and edge cases
INSERT INTO temp_table (name, price, status, data)
VALUES 
    ('Test Product 1', 9.99, 'active', CAST('binary data' AS BINARY)),
    ('Test Product 2', NULL, 'inactive', NULL),
    ('Special Test', 1000000.50, 'active', LOAD_FILE('/path/to/file'));

-- Use a CTE to generate a series of numbers and test UNION operations
WITH RECURSIVE number_sequence AS (
    SELECT 1 AS num
    UNION ALL
    SELECT num + 1 FROM number_sequence WHERE num < 1000
)
SELECT n.num, t.name 
FROM number_sequence n
JOIN temp_table t ON n.num % 2 = 0
UNION
SELECT n.num, 'Union Test' 
FROM number_sequence n
WHERE n.num > 500;

-- Test a correlated subquery to check for specific conditions
SELECT COUNT(*) 
FROM temp_table t1
WHERE EXISTS (
    SELECT 1 
    FROM temp_table t2 
    WHERE t2.id = t1.id AND t2.price > (SELECT AVG(price) FROM temp_table)
);

-- Insert data using a SELECT statement with a subquery to test complex operations
INSERT INTO temp_table (name, price, status)
SELECT CONCAT('Inserted Row ', id), price * 2, 'active'
FROM temp_table
WHERE id < 10;

-- Test transaction handling to ensure proper concurrency management
BEGIN;
    UPDATE temp_table SET price = price + 10 WHERE id % 3 = 0;
    SAVEPOINT my_savepoint;
    DELETE FROM temp_table WHERE id % 5 = 0;
    ROLLBACK TO my_savepoint;
COMMIT;

-- Clean up the temporary table to maintain a clean environment
DROP TABLE temp_table;