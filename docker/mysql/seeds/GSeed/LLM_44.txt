-- Initial seed for MySQL database fuzz testing

-- Create a table with various data types to test different scenarios
CREATE TABLE IF NOT EXISTS test_table (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    value DECIMAL(10, 2),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    status ENUM('active', 'inactive'),
    data BLOB,
    flags BIT(8)
);

-- Insert sample data into the table
INSERT INTO test_table (name, value, status) VALUES 
('Test1', 100.5, 'active'),
('Test2', NULL, 'inactive');

-- Test edge case with NULL values in a WHERE clause
UPDATE test_table SET value = NULL WHERE name = 'Test2';

-- Test complex DELETE statement with subquery and UNION
DELETE FROM test_table 
WHERE id IN (
    SELECT id FROM (
        SELECT id FROM test_table WHERE status = 'active'
        UNION ALL
        SELECT id FROM test_table WHERE value > 100
    ) AS tmp
);

-- Test INSERT ... SELECT with joins and aggregation
INSERT INTO test_table (name, value)
SELECT name, SUM(value) 
FROM test_table 
GROUP BY name;

-- Test stored procedure creation to cover function calls
DELIMITER //
CREATE PROCEDURE test_procedure(IN p_input INT, OUT p_output INT)
BEGIN
    SET p_output = p_input * 2;
END//
DELIMITER ;

-- Test trigger creation for AFTER UPDATE events
CREATE TRIGGER test_trigger AFTER UPDATE ON test_table 
FOR EACH ROW
BEGIN
    INSERT INTO audit_log (action, timestamp) VALUES ('update', NOW());
END;

-- Test index creation to cover query optimization paths
CREATE INDEX idx_value_status ON test_table (value, status);

-- Test partitioned table for data distribution testing
CREATE TABLE IF NOT EXISTS partitioned_test (
    id INT,
    amount DECIMAL(10, 2),
    transaction_date DATE
)
PARTITION BY RANGE (YEAR(transaction_date)) (
    PARTITION p0 VALUES LESS THAN (2020),
    PARTITION p1 VALUES LESS THAN (2023),
    PARTITION p2 VALUES LESS THAN MAXVALUE
);

-- Test view creation to cover virtual table scenarios
CREATE VIEW test_view AS 
SELECT name, value, created_at 
FROM test_table 
WHERE status = 'active';

-- Test stored function for encapsulated logic testing
DELIMITER //
CREATE FUNCTION test_function(p_input INT) RETURNS INT
DETERMINISTIC
BEGIN
    RETURN p_input + 10;
END//
DELIMITER ;

-- Test event scheduling for background task handling
CREATE EVENT IF NOT EXISTS cleanup_event
ON SCHEDULE EVERY 1 HOUR
DO
DELETE FROM test_table 
WHERE created_at < DATE_SUB(NOW(), INTERVAL 30 DAY);

-- Clean up temporary data after testing
SET @cleanup = (SELECT COUNT(*) FROM test_table);
TRUNCATE TABLE test_table;