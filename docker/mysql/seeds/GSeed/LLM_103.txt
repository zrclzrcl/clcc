-- Initial Seed for MySQL Fuzz Testing

-- Create necessary tables with various data types and constraints
CREATE TABLE t1 (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    price DECIMAL(10, 2),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    status ENUM('active', 'inactive')
);

CREATE TABLE t2 (
    id INT PRIMARY KEY,
    category_id INT,
    product_id INT,
    FOREIGN KEY (category_id) REFERENCES t3(id)
);

CREATE TABLE t3 (
    id INT PRIMARY KEY,
    name VARCHAR(50),
    description TEXT
);

-- Create a table for full-text search testing
CREATE TABLE articles (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255),
    content TEXT,
    FULLTEXT(title, content)
);

-- Insert sample data into tables
INSERT INTO t1 (name, price, status) VALUES 
('Laptop', 999.99, 'active'),
('Smartphone', 699.99, 'inactive');

INSERT INTO t3 (id, name, description) VALUES
(1, 'Electronics', 'Electronic devices'),
(2, 'Appliances', 'Home appliances');

-- Create a trigger for testing
DELIMITER //
CREATE TRIGGER after_insert_t1
AFTER INSERT ON t1
FOR EACH ROW
BEGIN
    INSERT INTO t_log (action, table_name, timestamp)
    VALUES ('INSERT', 't1', NOW());
END//
DELIMITER ;

-- Create a stored procedure with transactions
DELIMITER //
CREATE PROCEDURE process_order(IN order_id INT)
BEGIN
    DECLARE total DECIMAL(10, 2);
    START TRANSACTION;
        UPDATE t1 SET status = 'inactive' WHERE id = order_id;
        SELECT SUM(price) INTO total FROM t1 WHERE status = 'active';
        INSERT INTO orders (order_id, total_amount) VALUES (order_id, total);
    COMMIT;
END//
DELIMITER ;

-- Create a user-defined function
DELIMITER //
CREATE FUNCTION calculate_total(start INT, end INT)
RETURNS DECIMAL(10, 2)
DETERMINISTIC
BEGIN
    DECLARE result DECIMAL(10, 2) DEFAULT 0;
    DECLARE i INT DEFAULT start;
    WHILE i <= end DO
        SET result = result + i;
        SET i = i + 1;
    END WHILE;
    RETURN result;
END//
DELIMITER ;

-- Create a view for testing complex queries
CREATE VIEW product_summary AS
SELECT 
    t1.id,
    t1.name,
    t3.name AS category_name,
    t2.product_id
FROM 
    t1
JOIN 
    t2 ON t1.id = t2.product_id
JOIN 
    t3 ON t2.category_id = t3.id;

-- Create indexes for testing
CREATE INDEX idx_price ON t1(price);
CREATE FULLTEXT INDEX idx_articles_search ON articles(title, content);

-- Complex query with joins and subqueries
SELECT 
    t1.name,
    t3.description,
    (SELECT COUNT(*) FROM t2 WHERE category_id = t3.id) AS product_count,
    SUM(t1.price) OVER(PARTITION BY t3.name) AS total_price
FROM 
    t1
JOIN 
    t2 ON t1.id = t2.product_id
JOIN 
    t3 ON t2.category_id = t3.id
WHERE 
    t1.status = 'active'
GROUP BY 
    t1.id, t3.description
HAVING 
    total_price > 500;

-- Test UNION and INTERSECT operations
(SELECT id FROM t1 WHERE status = 'active')
UNION ALL
(SELECT product_id FROM t2);

-- Test window functions
SELECT 
    name,
    price,
    RANK() OVER(ORDER BY price DESC) AS price_rank
FROM 
    t1;

-- Test special MySQL commands
SHOW PROFILES;
BENCHMARK(1000, SLEEP(1));