-- Set optimizer switch for specific behavior testing
SET optimizer_switch='index_merge=on';

-- Create a table with various data types to test different scenarios
CREATE TABLE t1 (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL DEFAULT 'test',
    value DECIMAL(10, 2) NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    status ENUM('active', 'inactive') NOT NULL DEFAULT 'active'
);

-- Insert normal data
INSERT INTO t1 (name, value, created_at, status)
VALUES ('Test1', 100.50, '2023-01-01 00:00:00', 'active'),
       ('Test2', 200.75, '2023-01-02 00:00:00', 'inactive');

-- Insert edge case data
INSERT INTO t1 (name, value, created_at, status)
VALUES ('' '', -99999.99, '0000-00-00 00:00:00', 'active'),
       (REPEAT('a', 255), 99999.99, '9999-12-31 23:59:59', 'inactive');

-- Create a complex update to test expression evaluation
UPDATE t1 SET name = LPAD(name, 10, 'x'), 
             value = CASE WHEN status = 'active' THEN value * 1.1 ELSE value END,
             created_at = DATE_ADD(created_at, INTERVAL 365 DAY)
WHERE id < 10;

-- Test view creation for SQL execution paths
CREATE VIEW v1 AS
SELECT id, name, value, status
FROM t1
WHERE status = 'active';

-- Create a stored procedure to test dynamic SQL
DELIMITER $$
CREATE PROCEDURE sp_test(IN param INT)
BEGIN
    DECLARE var DECIMAL(10, 2);
    SELECT value INTO var FROM t1 WHERE id = param;
    IF var IS NOT NULL THEN
        INSERT INTO t1 (name, value, status) VALUES ('Procedure', var * 2, 'active');
    END IF;
END$$
DELIMITER ;

-- Test index creation and query optimization
CREATE INDEX idx_status ON t1(status);
ANALYZE TABLE t1;

-- Test edge case with large BLOB data
ALTER TABLE t1 ADD COLUMN blob_data BLOB;
UPDATE t1 SET blob_data = REPEAT('binary', 1024) WHERE id < 5;

-- Test date arithmetic and boundary conditions
SELECT DATE_SUB('2023-01-01', INTERVAL 100 YEAR), 
       DATE_ADD('2023-01-01', INTERVAL 1000 DAY);

-- Clean up temporary data
DELETE FROM t1 WHERE name LIKE 'Procedure%';

-- Test transaction and rollback
START TRANSACTION;
INSERT INTO t1 (name, value) VALUES ('RollbackTest', 500);
SAVEPOINT sp1;
DELETE FROM t1 WHERE name = 'RollbackTest';
ROLLBACK TO sp1;
COMMIT;

-- Drop view and stored procedure after testing
DROP VIEW v1;
DROP PROCEDURE sp_test;