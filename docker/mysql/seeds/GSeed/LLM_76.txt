-- Create a table with various data types and constraints
CREATE TABLE test_table (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    age INT CHECK (age >= 0),
    salary DECIMAL(10,2) DEFAULT 0.00,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE INDEX unique_name (name)
);

-- Insert sample data into the table
INSERT INTO test_table (name, age, salary) VALUES ('Alice', 30, 50000.00);
INSERT INTO test_table (name, age, salary) VALUES ('Bob', 25, 45000.00);

-- Create a stored procedure to calculate total salary
DELIMITER $$
CREATE PROCEDURE calc_total_salary()
BEGIN
    DECLARE total DECIMAL(10,2);
    SELECT SUM(salary) INTO total FROM test_table;
    SELECT total AS 'Total Salary';
END$$
DELIMITER ;

-- Call the stored procedure
CALL calc_total_salary();

-- Create a trigger to log updates on the table
CREATE TRIGGER update_log BEFORE UPDATE ON test_table
FOR EACH ROW
BEGIN
    INSERT INTO audit_log (id, name, age, salary, action) VALUES (OLD.id, OLD.name, OLD.age, OLD.salary, 'UPDATE');
END;

-- Perform an update operation that will trigger the trigger
UPDATE test_table SET salary = 51000.00 WHERE name = 'Alice';

-- Create a view to display specific columns from the table
CREATE VIEW employee_view AS
SELECT id, name, salary FROM test_table;

-- Select data from the view
SELECT * FROM employee_view;

-- Perform a complex query with joins and aggregations
SELECT t.name, t.age, SUM(t.salary) as total_salary
FROM test_table t
GROUP BY t.name, t.age;

-- Use a union operator to combine results from two different queries
(SELECT name, age FROM test_table WHERE age > 25)
UNION
(SELECT name, age FROM test_table WHERE salary > 48000.00);

-- Create an index on the name column
CREATE INDEX idx_name ON test_table(name);

-- Alter the table to add a new column
ALTER TABLE test_table ADD COLUMN department VARCHAR(50) DEFAULT 'General';

-- Update the new column with sample data
UPDATE test_table SET department = 'Engineering' WHERE id = 1;