-- Create table t1 with various data types and indexes
CREATE TABLE t1 (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    value DECIMAL(10, 2),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    UNIQUE KEY idx_name (name)
);

-- Insert sample data into t1
INSERT INTO t1 (id, name, value, created_at) VALUES 
(1, 'Test Item', 100.50, NOW()),
(2, 'Another Test', 200.75, NOW());

-- Create table t2 with a foreign key reference to t1
CREATE TABLE t2 (
    id INT AUTO_INCREMENT PRIMARY KEY,
    t1_id INT,
    FOREIGN KEY (t1_id) REFERENCES t1(id)
);

-- Insert sample data into t2 referencing t1
INSERT INTO t2 (id, t1_id) VALUES 
(1, 1),
(2, 2);

-- Use transactions to test commit and rollback
START TRANSACTION;
INSERT INTO t1 (name, value) VALUES ('Transaction Test', 300.00);
COMMIT;

-- Prepare and execute a statement with variables
SET @id_var = 1;
PREPARE stmt FROM 'SELECT name, value FROM t1 WHERE id = ?';
EXECUTE stmt USING @id_var;
DEALLOCATE PREPARE stmt;

-- Rename table to test metadata changes
RENAME TABLE t1 TO t1_backup;

-- Create a stored procedure with proper delimiter
DELIMITER $$
CREATE PROCEDURE update_value (IN p_id INT, IN p_new_value DECIMAL(10,2))
BEGIN
    UPDATE t1_backup SET value = p_new_value WHERE id = p_id;
END$$
DELIMITER ;

-- Call the stored procedure
CALL update_value(1, 400.50);

-- Test edge cases: inserting maximum values and nulls
INSERT INTO t1_backup (name, value) VALUES 
('Max Int', 9223372036854775807),
('Null Value', NULL);