-- Create a table with various data types and constraints
CREATE TABLE test_table (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    value DECIMAL(10, 2),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    status ENUM('active', 'inactive') NOT NULL DEFAULT 'active',
    description TEXT,
    UNIQUE INDEX unique_name (name)
);

-- Create a partitioned table
CREATE TABLE sales (
    id INT AUTO_INCREMENT PRIMARY KEY,
    amount DECIMAL(10, 2),
    sale_date DATE
) PARTITION BY RANGE (YEAR(sale_date)) (
    PARTITION p0 VALUES LESS THAN (2020),
    PARTITION p1 VALUES LESS THAN (2023),
    PARTITION p2 VALUES LESS THAN MAXVALUE
);

-- Create a trigger for logging changes
DELIMITER $$
CREATE TRIGGER after_insert_test_table
AFTER INSERT ON test_table
FOR EACH ROW
BEGIN
    INSERT INTO trigger_log (action, timestamp)
    VALUES ('insert', NOW());
END$$
DELIMITER ;

-- Insert sample data with various edge cases
INSERT INTO test_table (name, value, status, description)
VALUES ('Test1', 100.5, 'active', 'This is a test entry.'),
       ('Test2', NULL, 'inactive', ''),
       ('Test3', 9999999999, 'active', NULL);

-- Update statements to modify existing records
UPDATE test_table SET description = 'Updated description' WHERE id = 1;

-- Create a fulltext index for efficient text searching
ALTER TABLE test_table ADD FULLTEXT INDEX ft_description (description);

-- Create a spatial index
CREATE TABLE locations (
    id INT PRIMARY KEY,
    geom GEOMETRY NOT NULL
);
CREATE SPATIAL INDEX sp_idx ON locations(geom);

-- Insert geometry data and perform spatial operations
INSERT INTO locations VALUES (1, ST_GeomFromText('POINT(1 1)'));
SELECT ST_Distance(geom, ST_GeomFromText('POINT(2 2)')) AS distance FROM locations;

-- Use MariaDB-specific functions
SELECT _GTID_WAIT('uuid:1-1');