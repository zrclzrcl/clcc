SET NAMES utf8;

-- Create tables with various data types and constraints
CREATE TABLE t1 (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    birth_date DATE,
    salary DECIMAL(10, 2),
    status ENUM('active', 'inactive') DEFAULT 'active'
);

CREATE TABLE t2 (
    transaction_id INT PRIMARY KEY,
    amount DECIMAL(10, 2) NOT NULL,
    description TEXT
);

-- Insert sample data with edge cases
INSERT INTO t1 VALUES 
    (1, 'Alice', '1990-05-15', 75000.00, 'active'),
    (2, 'Bob', '1985-09-23', NULL, 'inactive'),
    (3, 'Charlie', NULL, 65000.00, 'active'),
    (4, '', '2000-12-31', 55000.00, 'inactive');

INSERT INTO t2 VALUES 
    (1, 1000.00, 'Initial deposit'),
    (2, -500.00, 'Groceries'),
    (3, NULL, 'Pending transaction');

-- Prepare and execute a statement with parameters
PREPARE p FROM "SELECT name, birth_date, salary 
               FROM t1 
               WHERE id = ?";
SET @p1 = 2;
EXECUTE p USING @p1;

-- Stored procedure with input and output parameters
DELIMITER //
CREATE PROCEDURE calculate_sum(IN start_id INT, OUT total DECIMAL(10, 2))
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE current_salary DECIMAL(10, 2);
    DECLARE cur CURSOR FOR SELECT salary FROM t1 WHERE id >= start_id;
    
    SET total = 0.00;
    OPEN cur;
    
    read_loop: LOOP
        FETCH cur INTO current_salary;
        IF done THEN
            LEAVE read_loop;
        END IF;
        SET total = total + current_salary;
    END LOOP;
    
    CLOSE cur;
END//
DELIMITER ;

-- Trigger to update related data
DELIMITER //
CREATE TRIGGER after_insert_t1
AFTER INSERT ON t1
FOR EACH ROW
BEGIN
    UPDATE t2 SET amount = amount + 100.00 WHERE transaction_id = NEW.id;
END//
DELIMITER ;

-- Complex query with window functions and joins
SELECT 
    t1.name,
    t1.salary,
    NTH_VALUE(t1.salary, 3) OVER (ORDER BY salary DESC) AS third_highest_salary,
    SUM(t2.amount) AS total_transactions
FROM t1
JOIN t2 ON t1.id = t2.transaction_id
GROUP BY t1.name;

-- Clean up objects if necessary
-- DROP TABLE t1, t2;
-- DROP PROCEDURE calculate_sum;
-- DROP TRIGGER after_insert_t1;