CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100),
    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    last_login DATETIME,
    status ENUM('active', 'inactive') DEFAULT 'active'
);

CREATE TABLE orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    product_name VARCHAR(100) NOT NULL,
    quantity INT DEFAULT 0,
    price DECIMAL(10, 2),
    order_date DATETIME,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

INSERT INTO users (username, email, last_login, status)
VALUES
('test_user1', 'user1@example.com', '2023-12-31 23:59:59', 'active'),
('test_user2', NULL, '2024-01-01 00:00:01', 'inactive'),
('', 'empty_username@invalid.com', NULL, 'active');

INSERT INTO orders (user_id, product_name, quantity, price, order_date)
VALUES
(1, 'Product A', 5, 99.99, '2023-12-30'),
(1, 'Product B', 0, 49.99, '2023-12-31'),
(2, 'Product C', 10, NULL, '2024-01-01');

SELECT u.username, o.product_name, o.quantity 
FROM users u 
JOIN orders o ON u.id = o.user_id 
WHERE u.status = 'active';

SELECT u.username, COUNT(o.order_id) AS total_orders, SUM(o.price * o.quantity) AS total_spent
FROM users u 
LEFT JOIN orders o ON u.id = o.user_id 
GROUP BY u.username;

SELECT username FROM users WHERE id IN (
    SELECT user_id FROM orders 
    GROUP BY user_id HAVING COUNT(*) > 1
);

SELECT NOW(), DATE_SUB(NOW(), INTERVAL 1 MONTH), CONCAT(username, '@example.com') AS suggested_email 
FROM users;