CREATE TABLE t1 (
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    age INT CHECK (age >= 0),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO t1 (name, age) VALUES 
('Alice', 30),
('Bob', 25),
('Charlie', 40),
('', 0); -- Testing edge case with empty string

CREATE TABLE t2 (
    id INT NOT NULL,
    value DECIMAL(10, 2) NOT NULL,
    status ENUM('active', 'inactive') DEFAULT 'active'
);

INSERT INTO t2 VALUES 
(1, 100.5, 'active'),
(2, 200.75, 'inactive'),
(3, 0.0, 'active');

SET @max_value = (SELECT MAX(value) FROM t2);
PREPARE stmt FROM 'SELECT * FROM t2 WHERE value > ?';
EXECUTE stmt USING @max_value;
DEALLOCATE PREPARE stmt;

WITH recursive_cte AS (
    SELECT 1 AS num
    UNION ALL
    SELECT num + 1 FROM recursive_cte WHERE num < 5
)
SELECT * FROM recursive_cte;

CREATE TABLE t3 AS
SELECT 
    t1.id,
    t1.name,
    t2.value,
    ROW_NUMBER() OVER (ORDER BY t1.age DESC) AS rn
FROM t1
JOIN t2 ON t1.id = t2.id;

REPLACE INTO t3 SELECT * FROM t1 CROSS JOIN t2 WHERE t1.age > 25;

SELECT 
    COUNT(*) AS total_rows,
    SUM(age) AS sum_age,
    AVG(value) AS avg_value
FROM t1
JOIN t2 ON t1.id = t2.id
GROUP BY t1.name
HAVING COUNT(*) > 1
ORDER BY total_rows DESC
LIMIT 5 OFFSET 2;

SET max_join_size = 1000;
ANALYZE TABLE t1, t2, t3;