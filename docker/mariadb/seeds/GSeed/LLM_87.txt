-- Set optimizer settings relevant to MariaDB
SET @@optimizer_switch='index_merge=on,materialization=on,semijoin=on';

-- Create tables with various data types and constraints
CREATE TABLE test_table (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    amount DECIMAL(10, 2) NOT NULL,
    status ENUM('active', 'inactive') NOT NULL
);

-- Create a table with unique constraints and indexes
CREATE TABLE test_index (
    id INT PRIMARY KEY,
    value INT UNIQUE,
    data TEXT,
    INDEX idx_value (value)
);

-- Insert sample data into tables
INSERT INTO test_table VALUES 
(1, 'Test 1', '2023-01-01 00:00:00', 100.50, 'active'),
(2, 'Test 2', '2023-01-02 00:00:00', 200.75, 'inactive'),
(3, 'Test 3', '2023-01-03 00:00:00', 300.00, 'active');

INSERT INTO test_index VALUES 
(1, 100, 'Sample data 1'),
(2, 200, 'Sample data 2'),
(3, 300, 'Sample data 3');

-- Create a stored function
DELIMITER $$
CREATE FUNCTION calculate_total(amount DECIMAL(10, 2)) 
RETURNS DECIMAL(10, 2)
DETERMINISTIC
BEGIN
    RETURN amount * 1.10; -- Example calculation with tax
END$$
DELIMITER ;

-- Create a trigger
CREATE TRIGGER after_insert_test_table
AFTER INSERT ON test_table
FOR EACH ROW
BEGIN
    INSERT INTO test_index (id, value, data) 
    VALUES (NEW.id, NEW.amount, CONCAT('Inserted: ', NEW.name));
END;

-- Simple SELECT statement with ORDER BY and LIMIT
SELECT * FROM test_table ORDER BY created_at DESC LIMIT 5;

-- Test JOIN between tables
SELECT t1.name, t2.value 
FROM test_table t1 
JOIN test_index t2 ON t1.id = t2.id;

-- Test aggregate functions and GROUP BY
SELECT status, COUNT(*) as total, SUM(amount) as total_amount 
FROM test_table 
GROUP BY status;

-- Test stored function in query
SELECT name, amount, calculate_total(amount) as total_with_tax 
FROM test_table;

-- Test NULL handling
SELECT * FROM test_table WHERE amount IS NULL;