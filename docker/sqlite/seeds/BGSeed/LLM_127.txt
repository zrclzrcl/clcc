-- Create a base table with various data types and constraints
CREATE TABLE IF NOT EXISTS t1(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    age INTEGER CHECK(age >= 0),
    salary REAL DEFAULT 0,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Insert sample data
INSERT INTO t1(name, age, salary) VALUES('Alice', 30, 5000.0);
INSERT INTO t1(name, age, salary) VALUES('Bob', 25, 4000.0);
INSERT INTO t1(name, age, salary) VALUES('Charlie', NULL, 6000.0);

-- Alter table to add new columns
ALTER TABLE t1 ADD COLUMN active BOOLEAN DEFAULT TRUE;
ALTER TABLE t1 ADD COLUMN last_login DATETIME;

-- Create an index for faster queries
CREATE INDEX idx_t1_name ON t1(name);

-- Create a virtual table for full-text search (SQLite-specific)
CREATE VIRTUAL TABLE t_fts USING fts5(
    content=t1,
    tokenize='porter'
);

-- Insert data into the virtual table
INSERT INTO t_fts VALUES('Alice 30 5000.0');
INSERT INTO t_fts VALUES('Bob 25 4000.0');

-- Create a complex query with CTE and window function
WITH cte AS (
    SELECT id, name, salary,
           RANK() OVER (ORDER BY salary DESC) as salary_rank
    FROM t1
)
SELECT c.id, c.name, c.salary, c.salary_rank,
       t.last_login
FROM cte c
JOIN t1 t ON c.id = t.id
WHERE c.salary_rank <= 2;

-- Test edge cases in WHERE clause
SELECT id, name, age, active
FROM t1
WHERE (age IS NULL OR age > 25)
   AND (name LIKE 'A%'
        OR salary >= 4000.0)
   AND active = TRUE;