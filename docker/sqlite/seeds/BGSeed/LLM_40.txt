-- Create tables with various data types and constraints
CREATE TABLE test_main (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    value REAL,
    enabled BOOLEAN DEFAULT FALSE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    description TEXT CHECK(length(description) <= 255)
);

-- Create a child table with foreign key reference
CREATE TABLE test_child (
    id INTEGER PRIMARY KEY,
    main_id INTEGER REFERENCES test_main(id),
    type TEXT CHECK(type IN ('A', 'B', 'C')),
    data BLOB,
    UNIQUE(main_id, type)
);

-- Create an FTS virtual table for text search functionality
CREATE VIRTUAL TABLE fts_test USING fts5(
    content TEXT,
    language='english',
    tokenize=porter
) WITHOUT ROWID;

-- Insert sample data into test_main with edge cases
INSERT INTO test_main VALUES(1, 'Test 1', NULL, TRUE, '2023-01-01 00:00:00', 'Short description');
INSERT INTO test_main VALUES(2, 'Test 2', 123.456, FALSE, '2023-01-02 12:34:56', '');
INSERT INTO test_main VALUES(3, 'Test 3', -99999.99, TRUE, NULL, 'This is a longer description that should be truncated');
INSERT INTO test_main VALUES(4, 'Test 4', 0, FALSE, CURRENT_TIMESTAMP, REPEAT('a', 255));
INSERT INTO test_main VALUES(5, 'Test 5', 1.0e+308, TRUE, '2023-01-01 00:00:00', NULL);

-- Insert related child records
INSERT INTO test_child VALUES(1, 1, 'A', X'deadbeef');
INSERT INTO test_child VALUES(2, 1, 'B', X'cafebabe');
INSERT INTO test_child VALUES(3, 2, 'C', NULL);
INSERT INTO test_child VALUES(4, 5, 'A', X'0000FFFF');

-- Insert sample data into FTS table
INSERT INTO fts_test (content) VALUES('This is a sample text for full-text search testing');
INSERT INTO fts_test (content) VALUES('Another example with different keywords');
INSERT INTO fts_test (content) VALUES('Edge case: empty string');
INSERT INTO fts_test (content) VALUES('Special characters like @#$%^&*()');
INSERT INTO fts_test (content) VALUES('Test for Porter stemming algorithm');

-- Complex SELECT query combining multiple features
SELECT 
    m.id AS main_id,
    m.name,
    COUNT(c.id) AS child_count,
    SUM(CASE WHEN c.type = 'A' THEN 1 ELSE 0 END) AS type_a_count,
    ROW_NUMBER() OVER(ORDER BY m.created_at DESC) AS row_num,
    GROUP_CONCAT(DISTINCT c.type, ', ') AS types
FROM 
    test_main m
LEFT JOIN 
    test_child c ON m.id = c.main_id
WHERE 
    m.enabled = TRUE AND (m.value > 100 OR m.description LIKE '%test%')
GROUP BY 
    m.id
HAVING 
    type_a_count > 0
ORDER BY 
    row_num ASC, m.name DESC
LIMIT 5 OFFSET 2;

-- Additional query demonstrating FTS usage
SELECT content FROM fts_test WHERE fts_test MATCH 'sample NEAR search' ORDER BY rank;