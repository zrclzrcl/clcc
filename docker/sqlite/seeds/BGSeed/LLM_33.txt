-- Create tables with primary keys, foreign keys, unique constraints, and indexes
CREATE TABLE t1 (
    id INTEGER PRIMARY KEY,
    name TEXT DEFAULT 'default_name',
    value NUMERIC(10, 2),
    is_active BOOLEAN NOT NULL CHECK (is_active IN (0, 1)),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE t2 (
    id INTEGER PRIMARY KEY,
    t1_id INTEGER REFERENCES t1(id) ON DELETE CASCADE,
    name TEXT UNIQUE,
    age INTEGER CHECK (age >= 0),
    UNIQUE(name, age)
);

CREATE TABLE t3 (
    id INTEGER PRIMARY KEY,
    event_type TEXT NOT NULL,
    data BLOB
);

-- Create indexes to test join performance and query optimization paths
CREATE INDEX t2_age_idx ON t2(age);
CREATE INDEX t1_id_value_idx ON t1(id, value);

-- Insert sample data with edge cases (e.g., NULL values)
INSERT INTO t1 VALUES (1, 'Alice', 100.5, 1, CURRENT_TIMESTAMP);
INSERT INTO t1 VALUES (2, 'Bob', NULL, 0, NULL);
INSERT INTO t2 VALUES (1, 1, 'Alice', 30);
INSERT INTO t2 VALUES (2, 2, 'Bob', NULL);
INSERT INTO t3 VALUES (1, 'create', X'48656C6C6F');
INSERT INTO t3 VALUES (2, 'update', NULL);

-- Use ANALYZE to test SQLite-specific behavior and force the database to update statistics
ANALYZE sqlite__master;
ANALYZE t1;

-- Create a trigger for testing dependent objects
CREATE TRIGGER t2_after_insert AFTER INSERT ON t2 
BEGIN
    INSERT INTO t3(event_type, data) VALUES('insert', NEW.name);
END;

-- Test complex SELECT statements with joins, conditions, and aggregate functions
SELECT t1.id, t1.name, t2.age, COUNT(*) AS total 
FROM t1 JOIN t2 ON t1.id = t2.t1_id 
WHERE t2.age > 25 AND t1.is_active = 1 
GROUP BY t1.id, t1.name, t2.age 
HAVING COUNT(*) >= 1 
ORDER BY total DESC;

SELECT MAX(t1.value), MIN(t2.age) FROM t1 LEFT JOIN t2 ON t1.id = t2.t1_id WHERE t1.is_active = 0 OR t2.age < 30;