-- Create tables with various data types and constraints
CREATE TABLE t1(
    a TEXT NOT NULL,
    b INTEGER PRIMARY KEY AUTOINCREMENT,
    c REAL,
    d BLOB,
    e TEXT DEFAULT 'default_value'
);

-- Create indexes to test query optimization paths
CREATE INDEX i1 ON t1(a);
CREATE UNIQUE INDEX i2 ON t1(b, c);

-- Insert data with edge cases and special characters
INSERT INTO t1 VALUES('', 1, NULL, X'0102', 'test');
INSERT INTO t1 VALUES(' ', 2, 3.14, NULL, 'another test');
INSERT INTO t1 VALUES('Hello''World', 3, -9999, X'ABCD', '');
INSERT INTO t1 VALUES('NULL Test', 4, 0.5, NULL, NULL);

-- Create a second table for testing joins and relationships
CREATE TABLE t2(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    value REAL DEFAULT 0,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Insert data into the second table with timestamps
INSERT INTO t2 VALUES(1, 'Item 1', 10.99, '2024-01-01');
INSERT INTO t2 VALUES(2, 'Item 2', NULL, '2024-01-02');

-- Create a virtual table for full-text search (SQLite-specific)
CREATE VIRTUAL TABLE t_fts USING fts5(content);
INSERT INTO t_fts VALUES('This is a test document');
INSERT INTO t_fts VALUES('Another document with more content');

-- Test window functions and aggregate operations
SELECT 
    b,
    COUNT(*) OVER (ORDER BY a) AS count_over,
    SUM(c) OVER () AS sum_all,
    ROW_NUMBER() OVER (PARTITION BY e ORDER BY d DESC) AS row_num
FROM t1
WHERE c > 0;

-- Test complex queries with subqueries and joins
SELECT 
    t1.a,
    t2.name,
    (SELECT COUNT(*) FROM t_fts WHERE content LIKE 'test%') AS ft_count
FROM t1
JOIN t2 ON t1.b = t2.id
WHERE t1.e IS NOT NULL;

-- Test transaction and trigger functionality
BEGIN TRANSACTION;
    INSERT INTO t2 VALUES(3, 'Item 3', 5.99, CURRENT_TIMESTAMP);
COMMIT;

CREATE TRIGGER trig_test AFTER INSERT ON t2 BEGIN
    INSERT INTO t1 VALUES('Trigger Insert', NEW.id, NULL, X'00FF', 'Trigger Test');
END;

-- Test common table expressions (CTEs)
WITH 
cte1 AS (
    SELECT a, COUNT(*) as cnt FROM t1 GROUP BY a
),
cte2 AS (
    SELECT name, value FROM t2 WHERE id > 2
)
SELECT cte1.a, cte1.cnt, cte2.name, cte2.value 
FROM cte1
LEFT JOIN cte2 ON cte1.b = cte2.id;

-- Test partitioned tables (SQLite-specific feature)
CREATE TABLE t_partition(
    id INTEGER PRIMARY KEY,
    region TEXT NOT NULL,
    value REAL
) PARTITIONED BY (region);

INSERT INTO t_partition VALUES(1, 'North', 100.5);
INSERT INTO t_partition VALUES(2, 'South', 200.7);