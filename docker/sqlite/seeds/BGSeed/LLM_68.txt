CREATE TABLE test_table (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    value REAL,
    data BLOB,
    flag BOOLEAN DEFAULT FALSE
);

CREATE INDEX idx_name ON test_table(name);
CREATE INDEX idx_value ON test_table(value) WHERE value > 100.0;

CREATE TABLE related_table (
    rid INTEGER PRIMARY KEY,
    tid INTEGER REFERENCES test_table(id),
    details TEXT
);

CREATE TRIGGER after_update_trigger
AFTER UPDATE OF id ON test_table
BEGIN
    INSERT INTO related_table(rid, tid, details)
    VALUES (NULL, NEW.id, 'Updated record');
END;

INSERT INTO test_table(name, value, data)
VALUES ('test1', 100.5, zeroblob(10)),
       ('test2', NULL, x'deadbeef'),
       ('test3', 200.75, randomblob(5));

WITH cte AS (
    SELECT id, name FROM test_table WHERE value > 150.0
)
INSERT INTO related_table(tid, details)
SELECT id, 'Inserted via CTE' FROM cte;

UPDATE test_table SET flag = TRUE WHERE id IN (SELECT id FROM test_table WHERE value IS NULL);

DELETE FROM test_table WHERE id NOT IN (SELECT id FROM related_table);

PRAGMA foreign_keys = ON;
PRAGMA integrity_check;

SELECT COUNT(*) AS total_records,
       SUM(value) AS total_value,
       AVG(value) AS average_value,
       MAX(value) AS max_value,
       MIN(value) AS min_value
FROM test_table;

SELECT t.name, r.details
FROM test_table t
JOIN related_table r ON t.id = r.tid
WHERE t.flag = TRUE;