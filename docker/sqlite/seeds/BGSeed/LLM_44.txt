-- Create tables with unique constraints and without rowid
CREATE TABLE t1(
    id INTEGER PRIMARY KEY,
    name TEXT UNIQUE,
    value REAL CHECK(value >= 0),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
) WITHOUT ROWID;

-- Index on a column for query optimization
CREATE INDEX idx_t1_name ON t1(name);

-- Another table with foreign key and triggers
CREATE TABLE t2(
    id INTEGER PRIMARY KEY,
    t1_id INTEGER REFERENCES t1(id),
    data TEXT,
    counter INTEGER DEFAULT 0
);

-- Trigger to enforce constraints or track changes
CREATE TRIGGER trg_after_insert_t1 AFTER INSERT ON t1
BEGIN
    INSERT INTO t2(t1_id, data) VALUES(new.id, 'New entry');
END;

-- Populate tables with sample data using CTEs and functions
WITH RECURSIVE cte AS (
    SELECT 1 AS n
    UNION ALL
    SELECT n + 1 FROM cte WHERE n < 50
)
INSERT INTO t1(id, name, value)
SELECT 
    n,
    printf('Item-%d', n),
    random() * 100
FROM cte;

-- Insert into t2 with manual data and using the trigger
INSERT INTO t1(id, name, value) VALUES(51, 'Special-Item', 42.0);

-- Test queries including joins, aggregates, window functions, and subqueries
SELECT 
    t1.id,
    t1.name,
    t2.data,
    SUM(t2.counter) OVER(PARTITION BY t1.id) AS total_counter
FROM t1
JOIN t2 ON t1.id = t2.t1_id
WHERE t1.name LIKE 'Item-%'
ORDER BY t1.id DESC
LIMIT 10;

-- Subquery example
SELECT 
    (SELECT COUNT(*) FROM t2 WHERE t1_id = t1.id) AS related_count,
    t1.*
FROM t1
WHERE t1.value > (
    SELECT AVG(value) FROM t1
);