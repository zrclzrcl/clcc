-- Create tables with various data types and constraints
CREATE TABLE test_table (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    value REAL CHECK(value > 0),
    data BLOB,
    status BOOLEAN DEFAULT FALSE
);

-- Insert sample data with different data types
INSERT INTO test_table VALUES(1, 'Test Name', 123.45, x'ABCD', TRUE);
INSERT INTO test_table VALUES(2, NULL, NULL, NULL, FALSE);
INSERT INTO test_table VALUES(3, 'Edge Case', -999.99, x'0000', TRUE);

-- Create a table with foreign key constraints
CREATE TABLE related_table (
    id INTEGER PRIMARY KEY,
    test_id INTEGER REFERENCES test_table(id) ON DELETE CASCADE,
    description TEXT UNIQUE
);

-- Insert data into related_table
INSERT INTO related_table VALUES(1, 1, 'Valid Description');
INSERT INTO related_table VALUES(2, NULL, 'Another Description');

-- Create a table for testing boundary conditions
CREATE TABLE edge_cases (
    id INTEGER PRIMARY KEY,
    small_int INT CHECK(small_int >= -32768 AND small_int <= 32767),
    big_int BIGINT DEFAULT 0,
    text_limit TEXT(10) -- SQLite does not enforce length constraints, but it's good to test
);

-- Insert edge cases
INSERT INTO edge_cases VALUES(1, -32768, 9223372036854775807, 'Max Length');
INSERT INTO edge_cases VALUES(2, 32767, -9223372036854775808, 'Min Length');

-- Create a table for testing NULL handling
CREATE TABLE null_test (
    id INTEGER PRIMARY KEY,
    nullable_column TEXT,
    non_nullable_column TEXT NOT NULL DEFAULT 'Default Value'
);

-- Insert NULL values
INSERT INTO null_test VALUES(1, NULL, NULL);
INSERT INTO null_test VALUES(2, 'Not Null', 'Required');

-- Create a table for testing string operations
CREATE TABLE string_ops (
    id INTEGER PRIMARY KEY,
    text_field TEXT,
    pattern_field TEXT
);

-- Insert data for string operations
INSERT INTO string_ops VALUES(1, 'Hello, World!', '.*World');
INSERT INTO string_ops VALUES(2, 'Testing 123', '[0-9]+');

-- Create a table for testing numeric operations
CREATE TABLE num_ops (
    id INTEGER PRIMARY KEY,
    int_value INT,
    float_value REAL
);

-- Insert data for numeric operations
INSERT INTO num_ops VALUES(1, 100, 100.5);
INSERT INTO num_ops VALUES(2, -50, -50.5);

-- Create a table for testing date and time functions (SQLite supports datetime via special handling)
CREATE TABLE datetime_test (
    id INTEGER PRIMARY KEY,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Insert data with timestamps
INSERT INTO datetime_test VALUES(1, '2023-01-01 00:00:00');
INSERT INTO datetime_test VALUES(2, NULL);

-- Create a table for testing triggers
CREATE TABLE trigger_test (
    id INTEGER PRIMARY KEY,
    value INT,
    last_updated DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Create a trigger to update timestamp on update
CREATE TRIGGER update_timestamp
AFTER UPDATE ON trigger_test
FOR EACH ROW
BEGIN
    UPDATE trigger_test SET last_updated = CURRENT_TIMESTAMP WHERE id = NEW.id;
END;

-- Insert data into trigger_test
INSERT INTO trigger_test VALUES(1, 100, '2023-01-01 00:00:00');
UPDATE trigger_test SET value = 200 WHERE id = 1;

-- Create a view for testing complex queries
CREATE VIEW complex_view AS
SELECT 
    t.id,
    t.name,
    rt.description,
    ec.small_int,
    ec.big_int,
    st.text_field,
    nt.nullable_column,
    dt.timestamp
FROM test_table t
LEFT JOIN related_table rt ON t.id = rt.test_id
LEFT JOIN edge_cases ec ON t.id = ec.id
LEFT JOIN string_ops st ON t.id = st.id
LEFT JOIN null_test nt ON t.id = nt.id
LEFT JOIN datetime_test dt ON t.id = dt.id;

-- Create a table for testing transactions and constraints
CREATE TABLE transaction_test (
    id INTEGER PRIMARY KEY,
    amount REAL CHECK(amount > 0),
    status TEXT CHECK(status IN ('active', 'inactive'))
);

-- Insert data with transactions
BEGIN TRANSACTION;
INSERT INTO transaction_test VALUES(1, 100.00, 'active');
INSERT INTO transaction_test VALUES(2, -50.00, 'invalid_status'); -- This should fail
COMMIT;

-- Create a table for testing indexes and performance
CREATE TABLE performance_test (
    id INTEGER PRIMARY KEY,
    data TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Insert large dataset (simulated)
INSERT INTO performance_test VALUES(1, 'Sample Data 1', '2023-01-01 00:00:00');
INSERT INTO performance_test VALUES(2, 'Sample Data 2', '2023-01-01 00:00:01');
-- ... (Add more rows as needed for testing)

-- Create a table for testing vacuum and database maintenance
CREATE TABLE vacuum_test (
    id INTEGER PRIMARY KEY,
    data TEXT
);

-- Insert data for vacuum test
INSERT INTO vacuum_test VALUES(1, 'Test Data 1');
DELETE FROM vacuum_test WHERE id = 1;

-- Create a table for testing SQLite-specific features (e.g., FTS)
CREATE VIRTUAL TABLE fts_test USING fts5(content);
INSERT INTO fts_test VALUES('This is a test document.');
INSERT INTO fts_test VALUES('Another test document with more content.');

-- Create a table for testing JSON handling
CREATE TABLE json_test (
    id INTEGER PRIMARY KEY,
    data JSON
);

-- Insert JSON data
INSERT INTO json_test VALUES(1, '{"name": "Test", "value": 100}');
INSERT INTO json_test VALUES(2, 'null');

-- Create a table for testing array and blob handling
CREATE TABLE blob_test (
    id INTEGER PRIMARY KEY,
    image BLOB,
    document BLOB
);

-- Insert binary data (simulated)
INSERT INTO blob_test VALUES(1, x'89504E47', x'25504446');
INSERT INTO blob_test VALUES(2, NULL, NULL);

-- Create a table for testing full-text search with stemming
CREATE VIRTUAL TABLE fts_stem USING fts5(content, tokenize=porter);
INSERT INTO fts_stem VALUES('test case');
INSERT INTO fts_stem VALUES('another test');

-- Create a table for testing complex queries and joins
CREATE TABLE query_test (
    id INTEGER PRIMARY KEY,
    category TEXT,
    subcategory TEXT,
    value REAL
);

-- Insert data for complex queries
INSERT INTO query_test VALUES(1, 'Category A', 'Sub A', 100);
INSERT INTO query_test VALUES(2, 'Category B', 'Sub B', 200);
INSERT INTO query_test VALUES(3, 'Category A', 'Sub C', 300);

-- Create a table for testing edge cases in queries
CREATE TABLE query_edge (
    id INTEGER PRIMARY KEY,
    small_value INT CHECK(small_value < 10),
    large_value BIGINT DEFAULT 9223372036854775807
);

-- Insert data for query edge cases
INSERT INTO query_edge VALUES(1, 9, 9223372036854775807);
INSERT INTO query_edge VALUES(2, -10, -9223372036854775808);

-- Create a table for testing SQLite's RTree module
CREATE VIRTUAL TABLE rtree_test USING rtree(
    id,
    x1, y1,
    x2, y2
);
INSERT INTO rtree_test VALUES(1, 1.0, 2.0, 3.0, 4.0);
INSERT INTO rtree_test VALUES(2, -5.0, -6.0, -7.0, -8.0);

-- Create a table for testing SQLite's CSV import/export
CREATE TABLE csv_test (
    id INTEGER PRIMARY KEY,
    name TEXT,
    value REAL
);