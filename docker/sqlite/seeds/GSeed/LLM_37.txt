-- Create a table with multiple columns and constraints
CREATE TABLE t1 (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    age INTEGER CHECK (age >= 0),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Create a table without rowid to test SQLite-specific features
CREATE TABLE t2 WITHOUT ROWID (
    id INTEGER PRIMARY KEY,
    value BLOB,
    FOREIGN KEY(id) REFERENCES t1(id)
);

-- Create an index on the name column for faster lookups
CREATE INDEX idx_t1_name ON t1(name);

-- Insert sample data into tables
INSERT INTO t1 (name, age) VALUES ('Alice', 30);
INSERT INTO t1 (name, age) VALUES ('Bob', NULL); -- Testing edge case with NULL value
INSERT INTO t2 (id, value) VALUES (1, randomblob(4));

-- Create a table to test triggers and constraints
CREATE TABLE t3 (
    id INTEGER,
    data TEXT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Create a trigger that fires after an INSERT into t1
CREATE TRIGGER t1_after_insert AFTER INSERT ON t1 BEGIN
    INSERT INTO t3 (id, data) VALUES (new.id, 'New entry added');
END;

-- Create a table to test window functions and CTEs
CREATE TABLE t4 (
    id INTEGER PRIMARY KEY,
    value REAL,
    category TEXT
);

-- Insert sample data into t4 for testing
INSERT INTO t4 VALUES (1, 10.5, 'A');
INSERT INTO t4 VALUES (2, 20.3, 'B');
INSERT INTO t4 VALUES (3, 15.2, 'A');

-- Create a complex query using CTE and window functions
WITH cte AS (
    SELECT id, value, category,
           ROW_NUMBER() OVER (ORDER BY value DESC) as row_num
    FROM t4
)
SELECT 
    id, 
    value, 
    category,
    SUM(value) OVER (ORDER BY category ASC) as cumulative_sum
FROM cte
WHERE row_num <= 5;

-- Create a table to test virtual tables and full-text search
CREATE VIRTUAL TABLE t5 USING fts5(content);
INSERT INTO t5 VALUES('This is a test document');
SELECT * FROM t5 WHERE content MATCH 'test';