-- Create table with various data types and constraints
CREATE TABLE t1 (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    value REAL DEFAULT 0.0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status BOOLEAN CHECK (status IN (0, 1)),
    UNIQUE(name)
);

-- Insert sample data with different values
INSERT INTO t1 (name, value, status) 
VALUES 
    ('item1', 100.5, 1),
    ('item2', -50.75, 0),
    ('item3', 0, 1),
    ('item4', NULL, 0);

-- Alter table to add a new column
ALTER TABLE t1 ADD COLUMN description TEXT;

-- Create indexes for testing queries
CREATE INDEX idx_value ON t1(value);
CREATE UNIQUE INDEX idx_name_status ON t1(name, status);

-- Create trigger for testing DML operations
CREATE TRIGGER trig_after_update AFTER UPDATE ON t1 
BEGIN
    INSERT INTO audit VALUES (datetime('now'), 't1', old.id, new.status);
END;

-- Create view for testing virtual tables and joins
CREATE VIEW v1 AS
SELECT name, value, status, description,
       CASE WHEN status = 1 THEN 'active' ELSE 'inactive' END as status_text
FROM t1;

-- Test CTE functionality
WITH recursive cte AS (
    SELECT 1 as n
    UNION ALL
    SELECT n + 1 FROM cte WHERE n < 5
)
SELECT * FROM cte;

-- Complex query with joins and window functions
SELECT 
    t1.name,
    t2.description,
    ROW_NUMBER() OVER (ORDER BY value DESC) as rank,
    CASE WHEN value > 0 THEN 'positive' ELSE 'negative' END as value_type
FROM t1
JOIN (
    SELECT id, description FROM t1 WHERE status = 1
) t2 ON t1.id = t2.id
WHERE created_at >= date('now', '-1 month')
GROUP BY name
HAVING COUNT(*) > 0
ORDER BY rank ASC;

-- Test transaction and rollback
BEGIN;
    INSERT INTO t1 (name, value, status) VALUES ('temp_item', 99.9, 1);
    -- Simulate a condition that may fail
    UPDATE t1 SET status = NULL WHERE name = 'temp_item';
COMMIT;