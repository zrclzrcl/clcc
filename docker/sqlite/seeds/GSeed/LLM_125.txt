-- Create tables with relationships and constraints
CREATE TABLE employees (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  department_id INTEGER REFERENCES departments(id),
  salary REAL CHECK (salary > 0)
);

CREATE TABLE departments (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT UNIQUE,
  budget REAL DEFAULT 100000
);

CREATE TABLE projects (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  start_date DATE,
  end_date DATE,
  department_id INTEGER REFERENCES departments(id)
);

-- Insert sample data with edge cases
INSERT INTO departments (name, budget) VALUES 
('Engineering', 500000),
('Marketing', 200000),
('Sales', 300000);

INSERT INTO employees (name, department_id, salary) VALUES 
('John Doe', 1, 85000.5),
('Jane Smith', 2, 75000.0),
('Bob Johnson', NULL, 65000.0); -- Testing NULL foreign key

INSERT INTO projects (name, start_date, end_date, department_id) VALUES 
('Project X', '2023-01-01', '2024-01-01', 1),
('Project Y', '2023-06-01', NULL, 2),
('Project Z', '2023-07-01', '2025-07-01', 3);

-- Complex query with joins and window functions
SELECT 
  e.name AS employee_name,
  d.name AS department_name,
  p.name AS project_name,
  COUNT(*) OVER (PARTITION BY d.id) AS total_employees_in_department,
  RANK() OVER (ORDER BY salary DESC) AS salary_rank
FROM employees e
JOIN departments d ON e.department_id = d.id
LEFT JOIN projects p ON d.id = p.department_id
WHERE 
  e.salary > (
    SELECT AVG(salary) FROM employees
  )
  AND p.start_date >= '2023-01-01'
GROUP BY e.id, d.id, p.id
HAVING COUNT(*) > 0
ORDER BY salary_rank ASC;

-- Test SQLite-specific features
SELECT 
  rowid AS internal_id,
  name,
  department_id,
  salary
FROM employees
WHERE name LIKE 'J%';

-- Test UNION and CTE
WITH recent_projects AS (
  SELECT * FROM projects WHERE start_date >= '2023-01-01'
)
SELECT 
  rp.name AS project_name,
  d.name AS department_name
FROM recent_projects rp
JOIN departments d ON rp.department_id = d.id
UNION
SELECT 
  p.name AS project_name,
  NULL AS department_name
FROM projects p
WHERE p.department_id IS NULL;

-- Test edge cases and constraints
INSERT INTO departments (name, budget) VALUES ('Test Department', 0); -- Testing DEFAULT value
UPDATE employees SET salary = -100 WHERE id = 3; -- Testing CHECK constraint
SELECT * FROM employees WHERE department_id NOT IN (SELECT id FROM departments); -- Testing NULL handling