-- Create tables with different data types and constraints
CREATE TABLE t1(
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    value REAL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE t2(
    id INTEGER PRIMARY KEY,
    t1_id INTEGER REFERENCES t1(id),
    data BLOB,
    status TEXT CHECK(status IN ('active', 'inactive'))
);

-- Create an index for testing query optimization
CREATE INDEX idx_t2_t1_id ON t2(t1_id);

-- Create a table with unique constraints and default values
CREATE TABLE t3(
    id INTEGER PRIMARY KEY,
    code TEXT UNIQUE,
    count INTEGER DEFAULT 0,
    last_updated TIMESTAMP
);

-- Create a trigger to test DML operations
CREATE TRIGGER trg_t1_insert AFTER INSERT ON t1
BEGIN
    UPDATE t3 SET count = count + 1 WHERE id = NEW.id;
END;

-- Create a view for testing virtual tables
CREATE VIEW v1 AS
SELECT t1.name, t2.data 
FROM t1 
JOIN t2 ON t1.id = t2.t1_id;

-- Complex query with subqueries and joins
WITH cte AS (
    SELECT id, name, value * 2 AS doubled_value 
    FROM t1 
    WHERE created_at > date('now', '-1 month')
)
SELECT 
    cte.name,
    t2.status,
    (SELECT count(*) FROM t3 WHERE t3.id = cte.id) AS total_count
FROM cte
LEFT JOIN t2 ON cte.id = t2.t1_id
WHERE t2.status IS NOT NULL
GROUP BY cte.name, t2.status
HAVING total_count > 0;

-- Test edge cases with boundary conditions and nulls
SELECT 
    MIN(created_at) AS first_record,
    MAX(created_at) AS last_record,
    COUNT(*) AS total_records
FROM t1
WHERE created_at IS NOT NULL AND value >= 0;