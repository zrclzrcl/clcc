-- Initial seed for SQLite fuzz testing
-- This seed includes a variety of SQL statements to test different functionalities and edge cases.

-- Create a table with various data types to cover different scenarios
CREATE TABLE test_table (
    id INTEGER PRIMARY KEY,
    name TEXT,
    value REAL,
    status BOOLEAN,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Insert sample data with NULL values for testing
INSERT INTO test_table (id, name, value, status) VALUES
(1, 'Alice', 100.5, TRUE),
(2, 'Bob', -200.3, FALSE),
(3, NULL, 50.0, NULL);

-- Test edge case with empty string and NULL values in text columns
CREATE TABLE test_edge_cases (
    id INTEGER PRIMARY KEY,
    empty_string TEXT DEFAULT '',
    null_value TEXT
);
INSERT INTO test_edge_cases (id) VALUES (1), (2); -- Insert rows with default empty string and NULL

-- Use UNION ALL to combine results from two different SELECT statements
SELECT name FROM test_table WHERE status = TRUE
UNION ALL
SELECT empty_string FROM test_edge_cases;

-- Test window functions which are specific to SQLite 3.25+
WITH ranked_data AS (
    SELECT id, name, value,
           ROW_NUMBER() OVER (ORDER BY value DESC) as rank
    FROM test_table
)
SELECT * FROM ranked_data WHERE rank <= 3;

-- Test common table expressions (CTEs) and recursive queries
WITH RECURSIVE numbers(n) AS (
    SELECT 1 UNION ALL
    SELECT n + 1 FROM numbers WHERE n < 5
)
SELECT * FROM numbers;

-- Test LEFT JOIN with NULL values
CREATE TABLE test_join_left (
    id INTEGER PRIMARY KEY,
    name TEXT,
    foreign_id INTEGER
);
INSERT INTO test_join_left VALUES (1, 'A', 10), (2, 'B', NULL);

SELECT t.name, l.foreign_id FROM test_table t LEFT JOIN test_join_left l ON t.id = l.id;

-- Test different collations for string comparison
SELECT name FROM test_table ORDER BY name COLLATE nocase;
SELECT name FROM test_table ORDER BY name COLLATE binary;

-- Clean up tables if needed (uncomment to use)
-- DROP TABLE test_table, test_edge_cases, test_join_left;