DROP TABLE IF EXISTS products;
CREATE TABLE products (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    price REAL CHECK (price >= 0),
    category_id INTEGER REFERENCES categories(id),
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS categories;
CREATE TABLE categories (
    id INTEGER PRIMARY KEY,
    name TEXT UNIQUE NOT NULL
);

INSERT INTO categories VALUES 
(1, 'Electronics'),
(2, 'Clothing'),
(3, 'Home & Garden');

INSERT INTO products VALUES 
(1, 'Laptop', 999.99, 1, '2024-01-01'),
(2, 'T-Shirt', 19.99, 2, NULL),
(3, 'Sofa', 499.99, 3, '2024-01-02'),
(4, 'Smartphone', 699.99, 1, '2024-01-03');

WITH recursive top_products AS (
    SELECT p.name, c.name AS category, 
           ROW_NUMBER() OVER (ORDER BY price DESC) AS rank
    FROM products p
    JOIN categories c ON p.category_id = c.id
    UNION ALL
    SELECT 'Total Rows:', '', COUNT(*) FROM products
)
SELECT * FROM top_products LIMIT 5;

SELECT 
    p.name,
    p.price,
    c.name AS category,
    CASE 
        WHEN price > 500 THEN 'High'
        ELSE 'Low'
    END AS price_range
FROM products p
LEFT JOIN categories c ON p.category_id = c.id
WHERE (price > 100 AND category_id IS NOT NULL)
   OR last_updated >= '2024-01-01';

SELECT 
    json_extract(json, '$.name') AS product_name,
    json_extract(json, '$.price') AS price
FROM (
    SELECT 
        CASE 
            WHEN id % 2 = 0 THEN '{"name":"' || name || '","price":' || price || '}'
            ELSE '{"jsonrpc":"2.0","method":"getProduct","params":{"id":'|| id ||'}}'
        END AS json
    FROM products
) AS j;

SELECT 
    COUNT(*) AS total_products,
    MIN(price) AS min_price,
    MAX(price) AS max_price,
    AVG(price) AS avg_price,
    SUM(price) AS total_revenue
FROM products
WHERE category_id IN (1, 2)
GROUP BY category_id
HAVING COUNT(*) > 2;