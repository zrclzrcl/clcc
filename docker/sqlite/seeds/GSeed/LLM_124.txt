-- Create tables with various data types and constraints
CREATE TABLE t1 (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    data BLOB
);

CREATE TABLE t2 (
    id INTEGER PRIMARY KEY,
    value INTEGER DEFAULT 0,
    FOREIGN KEY(id) REFERENCES t1(id)
);

CREATE TABLE t3 (
    id INTEGER PRIMARY KEY,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    WITHOUT ROWID
);

-- Insert sample data into tables
INSERT INTO t1 (id, name, data) VALUES 
(1, 'Alice', X'01'),
(2, 'Bob', X'02');

INSERT INTO t2 (id, value) VALUES 
(1, 42),
(2, 99);

-- Create triggers for testing side effects
CREATE TRIGGER trig_t2 AFTER INSERT ON t2 BEGIN
    UPDATE t1 SET data = X'FF' WHERE id = NEW.id;
END;

CREATE TRIGGER trig_t1 BEFORE DELETE ON t1 BEGIN
    INSERT INTO t3 (id, timestamp) VALUES (OLD.id, CURRENT_TIMESTAMP);
END;

-- Create view for testing derived tables
CREATE VIEW v1 AS 
SELECT t1.id, name, value 
FROM t1 JOIN t2 ON t1.id = t2.id;

-- Indexes for query optimization testing
CREATE INDEX idx_t1_name ON t1(name);
CREATE INDEX idx_t2_value ON t2(value);

-- Transaction and savepoint for rollback testing
BEGIN TRANSACTION;
    INSERT INTO t3 (id) VALUES (3);
    SAVEPOINT sp1;
        DELETE FROM t3 WHERE id = 3;
        ROLLBACK TO sp1;
COMMIT;

-- DML statements with complex conditions and joins
SELECT t1.id, name, value 
FROM v1 
WHERE value > (SELECT AVG(value) FROM t2);

UPDATE t2 SET value = value * 2 
WHERE id IN (SELECT id FROM t1 WHERE name LIKE 'A%');

DELETE FROM t1 WHERE name GLOB 'A*';

INSERT INTO t3 (id) VALUES (4);