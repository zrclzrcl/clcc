-- Create tables with various data types and constraints
CREATE TABLE t1 (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    data BLOB,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE t2 (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    value REAL CHECK(value > 0),
    status BOOLEAN DEFAULT FALSE
);

-- Create a table with unique constraints and indexes
CREATE TABLE t3 (
    id INTEGER PRIMARY KEY,
    key TEXT UNIQUE,
    content TEXT,
    INDEX idx_t3_key (key)
);

-- Insert sample data into tables
INSERT INTO t1 VALUES 
    (1, 'test1', randomblob(10), CURRENT_TIMESTAMP),
    (2, 'test2', NULL, datetime('now', '-1 day'));

INSERT INTO t2 VALUES 
    (NULL, 42.5, TRUE),
    (NULL, 99.9, FALSE);

-- Create a trigger that updates another table based on insertions
CREATE TRIGGER trig_t2 AFTER INSERT ON t2 BEGIN
    UPDATE t3 SET content = 'updated' WHERE id = new.id;
END;

-- Create a view with a complex query involving multiple tables
CREATE VIEW v1 AS
WITH cte1 AS (
    SELECT id, name FROM t1 WHERE timestamp > datetime('now', '-7 day')
)
SELECT 
    cte1.id,
    t2.value,
    t3.content
FROM cte1
JOIN t2 ON cte1.id = t2.id
LEFT JOIN t3 USING (id);

-- Create indexes for better query performance
CREATE INDEX idx_t1_timestamp ON t1(timestamp);
CREATE INDEX idx_t2_status_value ON t2(status, value);

-- Use PRAGMA statements to test SQLite-specific behaviors
PRAGMA journal_mode = WAL;
PRAGMA synchronous = NORMAL;

-- Test vacuum operation
VACUUM;

-- Test schema-related queries
SELECT name, type FROM sqlite_master WHERE type IN ('table', 'view');