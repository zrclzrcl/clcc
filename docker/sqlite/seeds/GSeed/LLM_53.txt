CREATE TABLE users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    age INTEGER CHECK (age >= 0),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO users(name, age) VALUES ('Alice', 30);
INSERT INTO users(name, age) VALUES ('Bob', 25);
INSERT INTO users(name, age) VALUES ('Charlie', NULL); -- Testing NULL values

CREATE TABLE orders (
    order_id INTEGER PRIMARY KEY,
    user_id INTEGER NOT NULL,
    amount REAL CHECK (amount > 0),
    status TEXT CHECK (status IN ('pending', 'shipped', 'delivered')),
    FOREIGN KEY(user_id) REFERENCES users(id)
);

INSERT INTO orders(order_id, user_id, amount, status) VALUES (1, 1, 100.5, 'pending');
INSERT INTO orders(order_id, user_id, amount, status) VALUES (2, 2, 75.25, 'shipped');

SELECT u.name, o.amount 
FROM users u 
JOIN orders o ON u.id = o.user_id 
WHERE o.status = 'shipped';

UPDATE orders SET status = 'delivered' WHERE order_id = 1;

DELETE FROM orders WHERE amount > 100;

CREATE INDEX idx_user_age ON users(age);

BEGIN;
    INSERT INTO users(name, age) VALUES ('TestUser', 20);
    UPDATE users SET name = 'UpdatedName' WHERE id = 4;
COMMIT;

SELECT COUNT(*) as total_users FROM users;

SELECT * FROM orders ORDER BY amount DESC LIMIT 1 OFFSET 0;

-- Testing SQLite-specific features
PRAGMA table_info(users);

REPLACE INTO users(id, name, age) VALUES (5, 'ReplacedUser', 35);

SELECT rowid, * FROM users WHERE name = 'Alice';

SELECT DISTINCT age FROM users;