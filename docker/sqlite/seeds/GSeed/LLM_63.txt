-- Create tables with various constraints and data types
CREATE TABLE IF NOT EXISTS t1 (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    text_value TEXT CHECK (LENGTH(text_value) <= 255),
    number_value INTEGER DEFAULT 0,
    blob_value BLOB,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Table with generated column and without rowid for testing specific SQLite features
CREATE TABLE IF NOT EXISTS t2 (
    id INTEGER PRIMARY KEY,
    a INT,
    b INT,
    c AS (a + b) VIRTUAL,
    UNIQUE (c)
) WITHOUT ROWID;

-- Create trigger to handle updates on t1
CREATE TRIGGER AFTER UPDATE ON t1 BEGIN
    INSERT INTO t2(a, b) VALUES(old.number_value, new.number_value);
END;

-- Insert sample data into tables
INSERT INTO t1(text_value, number_value, blob_value)
VALUES ('Sample text', 42, X'53686F72'), -- BLOB: 'Short'
       (NULL, -999, NULL),
       ('Long string ' || substr('a', 1, 1000), 1234567890, NULL);

-- Create indexes to test indexing
CREATE INDEX idx_t1_text_value ON t1(text_value);
CREATE UNIQUE INDEX idx_t2_c ON t2(c);

-- Update data in t1 to trigger the AFTER UPDATE trigger
UPDATE t1 SET number_value = 100 WHERE id = 1;

-- Complex SELECT queries testing various functionalities
SELECT 
    id,
    text_value,
    number_value,
    blob_value,
    created_at,
    substr(text_value, 1, 5) AS short_text,
    LENGTH(text_value) AS text_length
FROM t1
ORDER BY created_at DESC;

-- Window functions and aggregate tests
WITH ranked_data AS (
    SELECT 
        id,
        RANK() OVER (ORDER BY number_value DESC) as rank,
        ROW_NUMBER() OVER () as row_num
    FROM t1
)
SELECT 
    rd.id,
    rd.rank,
    rd.row_num,
    COUNT(*) OVER () as total_rows,
    SUM(t2.c) OVER (PARTITION BY t2.a) as sum_c_by_a
FROM ranked_data rd
JOIN t2 ON rd.id = t2.id;

-- Test UNION ALL and result set combination
SELECT 'First' AS source, * FROM t1 LIMIT 2
UNION ALL
SELECT 'Second' AS source, * FROM t2 LIMIT 2;