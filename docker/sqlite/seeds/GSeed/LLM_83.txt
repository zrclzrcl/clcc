BEGIN;

-- Create table t1 with columns id, name, and value
CREATE TABLE t1 (
    id INTEGER PRIMARY KEY,
    name TEXT,
    value INT
);

-- Insert data into t1 including NULL and edge values
INSERT INTO t1 VALUES
  (NULL, 'Alice', 100),
  (2, 'Bob', NULL),
  (3, 'Charlie', -50),
  (4, 'David', 9223372036854775807),
  (5, 'Eve', 0);

-- Create table t2 as a derived table from t1
CREATE TABLE t2 AS 
SELECT id, name FROM t1 WHERE value > 50;

-- Insert additional data into t2
INSERT INTO t2 VALUES
  (6, 'Frank'),
  (NULL, 'Grace');

-- Create table t3 with various data types including NULLs
CREATE TABLE t3 (
    text_col TEXT,
    num_col FLOAT,
    another_text TEXT
);

-- Insert sample data into t3
INSERT INTO t3 VALUES
  ('apple', 1.5, 'fruit'),
  ('banana', 2.0, 'fruit'),
  ('carrot', NULL, 'vegetable');

-- Basic SELECT statement
SELECT * FROM t1;

-- SELECT with WHERE clause and NULL check
SELECT id, name FROM t1 
WHERE value > 50 OR value IS NULL;

-- Use of aliases and ordering
SELECT name AS person_name, value AS amount 
FROM t1 
ORDER BY amount DESC;

-- Aggregation with HAVING clause
SELECT COUNT(*) total_rows, SUM(value) total_value 
FROM t1 
GROUP BY name 
HAVING COUNT(*) > 1;

-- UNION ALL operation combining rows from t1 and t2
SELECT * FROM t1 
UNION ALL 
SELECT * FROM t2;

-- CTE example filtering even IDs
WITH cte AS (
    SELECT id, name 
    FROM t1 
    WHERE value > 0
)
SELECT * 
FROM cte 
WHERE id % 2 = 0;

-- Window function to rank values
SELECT id, name, RANK() OVER (ORDER BY value DESC) AS rank 
FROM t1;

COMMIT;